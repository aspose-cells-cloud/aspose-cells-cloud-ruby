=begin
#Web API Swagger specification

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.0-SNAPSHOT

=end

require "uri"

module AsposeCellsCloud
  class CellsPageBreaksApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # 
    # 
    # @param name 
    # @param sheet_name 
    # @param index 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder 
    # @option opts [String] :storage storage name.
    # @return [SaaSposeResponse]
    def cells_page_breaks_delete_horizontal_page_break(name, sheet_name, index, opts = {})
      data, _status_code, _headers = cells_page_breaks_delete_horizontal_page_break_with_http_info(name, sheet_name, index, opts)
      return data
    end

    # 
    # 
    # @param name 
    # @param sheet_name 
    # @param index 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder 
    # @option opts [String] :storage storage name.
    # @return [Array<(SaaSposeResponse, Fixnum, Hash)>] SaaSposeResponse data, response status code and response headers
    def cells_page_breaks_delete_horizontal_page_break_with_http_info(name, sheet_name, index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsPageBreaksApi.cells_page_breaks_delete_horizontal_page_break ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsPageBreaksApi.cells_page_breaks_delete_horizontal_page_break"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsPageBreaksApi.cells_page_breaks_delete_horizontal_page_break"
      end
      # verify the required parameter 'index' is set
      if @api_client.config.client_side_validation && index.nil?
        fail ArgumentError, "Missing the required parameter 'index' when calling CellsPageBreaksApi.cells_page_breaks_delete_horizontal_page_break"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/horizontalpagebreaks/{index}".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s).sub('{' + 'index' + '}', index.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SaaSposeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsPageBreaksApi#cells_page_breaks_delete_horizontal_page_break\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param name 
    # @param sheet_name 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :row 
    # @option opts [String] :folder 
    # @option opts [String] :storage storage name.
    # @return [SaaSposeResponse]
    def cells_page_breaks_delete_horizontal_page_breaks(name, sheet_name, opts = {})
      data, _status_code, _headers = cells_page_breaks_delete_horizontal_page_breaks_with_http_info(name, sheet_name, opts)
      return data
    end

    # 
    # 
    # @param name 
    # @param sheet_name 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :row 
    # @option opts [String] :folder 
    # @option opts [String] :storage storage name.
    # @return [Array<(SaaSposeResponse, Fixnum, Hash)>] SaaSposeResponse data, response status code and response headers
    def cells_page_breaks_delete_horizontal_page_breaks_with_http_info(name, sheet_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsPageBreaksApi.cells_page_breaks_delete_horizontal_page_breaks ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsPageBreaksApi.cells_page_breaks_delete_horizontal_page_breaks"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsPageBreaksApi.cells_page_breaks_delete_horizontal_page_breaks"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/horizontalpagebreaks".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'row'] = opts[:'row'] if !opts[:'row'].nil?
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SaaSposeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsPageBreaksApi#cells_page_breaks_delete_horizontal_page_breaks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param name 
    # @param sheet_name 
    # @param index 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder 
    # @option opts [String] :storage storage name.
    # @return [SaaSposeResponse]
    def cells_page_breaks_delete_vertical_page_break(name, sheet_name, index, opts = {})
      data, _status_code, _headers = cells_page_breaks_delete_vertical_page_break_with_http_info(name, sheet_name, index, opts)
      return data
    end

    # 
    # 
    # @param name 
    # @param sheet_name 
    # @param index 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder 
    # @option opts [String] :storage storage name.
    # @return [Array<(SaaSposeResponse, Fixnum, Hash)>] SaaSposeResponse data, response status code and response headers
    def cells_page_breaks_delete_vertical_page_break_with_http_info(name, sheet_name, index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsPageBreaksApi.cells_page_breaks_delete_vertical_page_break ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsPageBreaksApi.cells_page_breaks_delete_vertical_page_break"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsPageBreaksApi.cells_page_breaks_delete_vertical_page_break"
      end
      # verify the required parameter 'index' is set
      if @api_client.config.client_side_validation && index.nil?
        fail ArgumentError, "Missing the required parameter 'index' when calling CellsPageBreaksApi.cells_page_breaks_delete_vertical_page_break"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/verticalpagebreaks/{index}".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s).sub('{' + 'index' + '}', index.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SaaSposeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsPageBreaksApi#cells_page_breaks_delete_vertical_page_break\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param name 
    # @param sheet_name 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :column 
    # @option opts [String] :folder 
    # @option opts [String] :storage storage name.
    # @return [SaaSposeResponse]
    def cells_page_breaks_delete_vertical_page_breaks(name, sheet_name, opts = {})
      data, _status_code, _headers = cells_page_breaks_delete_vertical_page_breaks_with_http_info(name, sheet_name, opts)
      return data
    end

    # 
    # 
    # @param name 
    # @param sheet_name 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :column 
    # @option opts [String] :folder 
    # @option opts [String] :storage storage name.
    # @return [Array<(SaaSposeResponse, Fixnum, Hash)>] SaaSposeResponse data, response status code and response headers
    def cells_page_breaks_delete_vertical_page_breaks_with_http_info(name, sheet_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsPageBreaksApi.cells_page_breaks_delete_vertical_page_breaks ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsPageBreaksApi.cells_page_breaks_delete_vertical_page_breaks"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsPageBreaksApi.cells_page_breaks_delete_vertical_page_breaks"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/verticalpagebreaks".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'column'] = opts[:'column'] if !opts[:'column'].nil?
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SaaSposeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsPageBreaksApi#cells_page_breaks_delete_vertical_page_breaks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param name 
    # @param sheet_name 
    # @param index 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder 
    # @option opts [String] :storage storage name.
    # @return [HorizontalPageBreakResponse]
    def cells_page_breaks_get_horizontal_page_break(name, sheet_name, index, opts = {})
      data, _status_code, _headers = cells_page_breaks_get_horizontal_page_break_with_http_info(name, sheet_name, index, opts)
      return data
    end

    # 
    # 
    # @param name 
    # @param sheet_name 
    # @param index 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder 
    # @option opts [String] :storage storage name.
    # @return [Array<(HorizontalPageBreakResponse, Fixnum, Hash)>] HorizontalPageBreakResponse data, response status code and response headers
    def cells_page_breaks_get_horizontal_page_break_with_http_info(name, sheet_name, index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsPageBreaksApi.cells_page_breaks_get_horizontal_page_break ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsPageBreaksApi.cells_page_breaks_get_horizontal_page_break"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsPageBreaksApi.cells_page_breaks_get_horizontal_page_break"
      end
      # verify the required parameter 'index' is set
      if @api_client.config.client_side_validation && index.nil?
        fail ArgumentError, "Missing the required parameter 'index' when calling CellsPageBreaksApi.cells_page_breaks_get_horizontal_page_break"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/horizontalpagebreaks/{index}".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s).sub('{' + 'index' + '}', index.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'HorizontalPageBreakResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsPageBreaksApi#cells_page_breaks_get_horizontal_page_break\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param name 
    # @param sheet_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder 
    # @option opts [String] :storage storage name.
    # @return [HorizontalPageBreaksResponse]
    def cells_page_breaks_get_horizontal_page_breaks(name, sheet_name, opts = {})
      data, _status_code, _headers = cells_page_breaks_get_horizontal_page_breaks_with_http_info(name, sheet_name, opts)
      return data
    end

    # 
    # 
    # @param name 
    # @param sheet_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder 
    # @option opts [String] :storage storage name.
    # @return [Array<(HorizontalPageBreaksResponse, Fixnum, Hash)>] HorizontalPageBreaksResponse data, response status code and response headers
    def cells_page_breaks_get_horizontal_page_breaks_with_http_info(name, sheet_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsPageBreaksApi.cells_page_breaks_get_horizontal_page_breaks ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsPageBreaksApi.cells_page_breaks_get_horizontal_page_breaks"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsPageBreaksApi.cells_page_breaks_get_horizontal_page_breaks"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/horizontalpagebreaks".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'HorizontalPageBreaksResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsPageBreaksApi#cells_page_breaks_get_horizontal_page_breaks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param name 
    # @param sheet_name 
    # @param index 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder 
    # @option opts [String] :storage storage name.
    # @return [VerticalPageBreakResponse]
    def cells_page_breaks_get_vertical_page_break(name, sheet_name, index, opts = {})
      data, _status_code, _headers = cells_page_breaks_get_vertical_page_break_with_http_info(name, sheet_name, index, opts)
      return data
    end

    # 
    # 
    # @param name 
    # @param sheet_name 
    # @param index 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder 
    # @option opts [String] :storage storage name.
    # @return [Array<(VerticalPageBreakResponse, Fixnum, Hash)>] VerticalPageBreakResponse data, response status code and response headers
    def cells_page_breaks_get_vertical_page_break_with_http_info(name, sheet_name, index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsPageBreaksApi.cells_page_breaks_get_vertical_page_break ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsPageBreaksApi.cells_page_breaks_get_vertical_page_break"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsPageBreaksApi.cells_page_breaks_get_vertical_page_break"
      end
      # verify the required parameter 'index' is set
      if @api_client.config.client_side_validation && index.nil?
        fail ArgumentError, "Missing the required parameter 'index' when calling CellsPageBreaksApi.cells_page_breaks_get_vertical_page_break"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/verticalpagebreaks/{index}".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s).sub('{' + 'index' + '}', index.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VerticalPageBreakResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsPageBreaksApi#cells_page_breaks_get_vertical_page_break\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param name 
    # @param sheet_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder 
    # @option opts [String] :storage storage name.
    # @return [VerticalPageBreaksResponse]
    def cells_page_breaks_get_vertical_page_breaks(name, sheet_name, opts = {})
      data, _status_code, _headers = cells_page_breaks_get_vertical_page_breaks_with_http_info(name, sheet_name, opts)
      return data
    end

    # 
    # 
    # @param name 
    # @param sheet_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder 
    # @option opts [String] :storage storage name.
    # @return [Array<(VerticalPageBreaksResponse, Fixnum, Hash)>] VerticalPageBreaksResponse data, response status code and response headers
    def cells_page_breaks_get_vertical_page_breaks_with_http_info(name, sheet_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsPageBreaksApi.cells_page_breaks_get_vertical_page_breaks ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsPageBreaksApi.cells_page_breaks_get_vertical_page_breaks"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsPageBreaksApi.cells_page_breaks_get_vertical_page_breaks"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/verticalpagebreaks".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VerticalPageBreaksResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsPageBreaksApi#cells_page_breaks_get_vertical_page_breaks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param name 
    # @param sheet_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cellname 
    # @option opts [Integer] :row 
    # @option opts [Integer] :column 
    # @option opts [Integer] :start_column 
    # @option opts [Integer] :end_column 
    # @option opts [String] :folder 
    # @option opts [String] :storage storage name.
    # @return [SaaSposeResponse]
    def cells_page_breaks_put_horizontal_page_break(name, sheet_name, opts = {})
      data, _status_code, _headers = cells_page_breaks_put_horizontal_page_break_with_http_info(name, sheet_name, opts)
      return data
    end

    # 
    # 
    # @param name 
    # @param sheet_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cellname 
    # @option opts [Integer] :row 
    # @option opts [Integer] :column 
    # @option opts [Integer] :start_column 
    # @option opts [Integer] :end_column 
    # @option opts [String] :folder 
    # @option opts [String] :storage storage name.
    # @return [Array<(SaaSposeResponse, Fixnum, Hash)>] SaaSposeResponse data, response status code and response headers
    def cells_page_breaks_put_horizontal_page_break_with_http_info(name, sheet_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsPageBreaksApi.cells_page_breaks_put_horizontal_page_break ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsPageBreaksApi.cells_page_breaks_put_horizontal_page_break"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsPageBreaksApi.cells_page_breaks_put_horizontal_page_break"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/horizontalpagebreaks".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'cellname'] = opts[:'cellname'] if !opts[:'cellname'].nil?
      query_params[:'row'] = opts[:'row'] if !opts[:'row'].nil?
      query_params[:'column'] = opts[:'column'] if !opts[:'column'].nil?
      query_params[:'startColumn'] = opts[:'start_column'] if !opts[:'start_column'].nil?
      query_params[:'endColumn'] = opts[:'end_column'] if !opts[:'end_column'].nil?
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SaaSposeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsPageBreaksApi#cells_page_breaks_put_horizontal_page_break\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param name 
    # @param sheet_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cellname 
    # @option opts [Integer] :column 
    # @option opts [Integer] :row 
    # @option opts [Integer] :start_row 
    # @option opts [Integer] :end_row 
    # @option opts [String] :folder 
    # @option opts [String] :storage storage name.
    # @return [SaaSposeResponse]
    def cells_page_breaks_put_vertical_page_break(name, sheet_name, opts = {})
      data, _status_code, _headers = cells_page_breaks_put_vertical_page_break_with_http_info(name, sheet_name, opts)
      return data
    end

    # 
    # 
    # @param name 
    # @param sheet_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cellname 
    # @option opts [Integer] :column 
    # @option opts [Integer] :row 
    # @option opts [Integer] :start_row 
    # @option opts [Integer] :end_row 
    # @option opts [String] :folder 
    # @option opts [String] :storage storage name.
    # @return [Array<(SaaSposeResponse, Fixnum, Hash)>] SaaSposeResponse data, response status code and response headers
    def cells_page_breaks_put_vertical_page_break_with_http_info(name, sheet_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsPageBreaksApi.cells_page_breaks_put_vertical_page_break ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsPageBreaksApi.cells_page_breaks_put_vertical_page_break"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsPageBreaksApi.cells_page_breaks_put_vertical_page_break"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/verticalpagebreaks".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'cellname'] = opts[:'cellname'] if !opts[:'cellname'].nil?
      query_params[:'column'] = opts[:'column'] if !opts[:'column'].nil?
      query_params[:'row'] = opts[:'row'] if !opts[:'row'].nil?
      query_params[:'startRow'] = opts[:'start_row'] if !opts[:'start_row'].nil?
      query_params[:'endRow'] = opts[:'end_row'] if !opts[:'end_row'].nil?
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SaaSposeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsPageBreaksApi#cells_page_breaks_put_vertical_page_break\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
