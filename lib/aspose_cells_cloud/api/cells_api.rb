=begin
#Web API Swagger specification

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.0-SNAPSHOT

=end

require "uri"

module AsposeCellsCloud
  class CellsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Delete worksheet columns.
    # 
    # @param name The workbook name.
    # @param sheet_name The worksheet name.
    # @param column_index The column index.
    # @param columns The columns.
    # @param update_reference The update reference.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The workbook folder.
    # @option opts [String] :storage storage name.
    # @return [ColumnsResponse]
    def cells_delete_worksheet_columns(name, sheet_name, column_index, columns, update_reference, opts = {})
      data, _status_code, _headers = cells_delete_worksheet_columns_with_http_info(name, sheet_name, column_index, columns, update_reference, opts)
      return data
    end

    # Delete worksheet columns.
    # 
    # @param name The workbook name.
    # @param sheet_name The worksheet name.
    # @param column_index The column index.
    # @param columns The columns.
    # @param update_reference The update reference.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The workbook folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(ColumnsResponse, Fixnum, Hash)>] ColumnsResponse data, response status code and response headers
    def cells_delete_worksheet_columns_with_http_info(name, sheet_name, column_index, columns, update_reference, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsApi.cells_delete_worksheet_columns ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsApi.cells_delete_worksheet_columns"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsApi.cells_delete_worksheet_columns"
      end
      # verify the required parameter 'column_index' is set
      if @api_client.config.client_side_validation && column_index.nil?
        fail ArgumentError, "Missing the required parameter 'column_index' when calling CellsApi.cells_delete_worksheet_columns"
      end
      # verify the required parameter 'columns' is set
      if @api_client.config.client_side_validation && columns.nil?
        fail ArgumentError, "Missing the required parameter 'columns' when calling CellsApi.cells_delete_worksheet_columns"
      end
      # verify the required parameter 'update_reference' is set
      if @api_client.config.client_side_validation && update_reference.nil?
        fail ArgumentError, "Missing the required parameter 'update_reference' when calling CellsApi.cells_delete_worksheet_columns"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/cells/columns/{columnIndex}".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s).sub('{' + 'columnIndex' + '}', column_index.to_s)

      # query parameters
      query_params = {}
      query_params[:'columns'] = columns
      query_params[:'updateReference'] = update_reference
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ColumnsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsApi#cells_delete_worksheet_columns\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete worksheet row.
    # 
    # @param name The workbook name.
    # @param sheet_name The worksheet bame.
    # @param row_index The row index.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The document folder.
    # @option opts [String] :storage storage name.
    # @return [SaaSposeResponse]
    def cells_delete_worksheet_row(name, sheet_name, row_index, opts = {})
      data, _status_code, _headers = cells_delete_worksheet_row_with_http_info(name, sheet_name, row_index, opts)
      return data
    end

    # Delete worksheet row.
    # 
    # @param name The workbook name.
    # @param sheet_name The worksheet bame.
    # @param row_index The row index.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The document folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(SaaSposeResponse, Fixnum, Hash)>] SaaSposeResponse data, response status code and response headers
    def cells_delete_worksheet_row_with_http_info(name, sheet_name, row_index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsApi.cells_delete_worksheet_row ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsApi.cells_delete_worksheet_row"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsApi.cells_delete_worksheet_row"
      end
      # verify the required parameter 'row_index' is set
      if @api_client.config.client_side_validation && row_index.nil?
        fail ArgumentError, "Missing the required parameter 'row_index' when calling CellsApi.cells_delete_worksheet_row"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/cells/rows/{rowIndex}".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s).sub('{' + 'rowIndex' + '}', row_index.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SaaSposeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsApi#cells_delete_worksheet_row\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete several worksheet rows.
    # 
    # @param name The workbook name.
    # @param sheet_name The worksheet bame.
    # @param startrow The begin row index to be operated.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :total_rows Number of rows to be operated. (default to 1)
    # @option opts [BOOLEAN] :update_reference Indicates if update references in other worksheets. (default to true)
    # @option opts [String] :folder The document folder.
    # @option opts [String] :storage storage name.
    # @return [SaaSposeResponse]
    def cells_delete_worksheet_rows(name, sheet_name, startrow, opts = {})
      data, _status_code, _headers = cells_delete_worksheet_rows_with_http_info(name, sheet_name, startrow, opts)
      return data
    end

    # Delete several worksheet rows.
    # 
    # @param name The workbook name.
    # @param sheet_name The worksheet bame.
    # @param startrow The begin row index to be operated.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :total_rows Number of rows to be operated.
    # @option opts [BOOLEAN] :update_reference Indicates if update references in other worksheets.
    # @option opts [String] :folder The document folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(SaaSposeResponse, Fixnum, Hash)>] SaaSposeResponse data, response status code and response headers
    def cells_delete_worksheet_rows_with_http_info(name, sheet_name, startrow, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsApi.cells_delete_worksheet_rows ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsApi.cells_delete_worksheet_rows"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsApi.cells_delete_worksheet_rows"
      end
      # verify the required parameter 'startrow' is set
      if @api_client.config.client_side_validation && startrow.nil?
        fail ArgumentError, "Missing the required parameter 'startrow' when calling CellsApi.cells_delete_worksheet_rows"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/cells/rows".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'startrow'] = startrow
      query_params[:'totalRows'] = opts[:'total_rows'] if !opts[:'total_rows'].nil?
      query_params[:'updateReference'] = opts[:'update_reference'] if !opts[:'update_reference'].nil?
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SaaSposeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsApi#cells_delete_worksheet_rows\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read cell data by cell's name.
    # 
    # @param name Document name.
    # @param sheet_name Worksheet name.
    # @param cell_or_method_name The cell&#39;s or method name. (Method name like firstcell, endcell etc.)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder Document&#39;s folder.
    # @option opts [String] :storage storage name.
    # @return [Object]
    def cells_get_worksheet_cell(name, sheet_name, cell_or_method_name, opts = {})
      data, _status_code, _headers = cells_get_worksheet_cell_with_http_info(name, sheet_name, cell_or_method_name, opts)
      return data
    end

    # Read cell data by cell&#39;s name.
    # 
    # @param name Document name.
    # @param sheet_name Worksheet name.
    # @param cell_or_method_name The cell&#39;s or method name. (Method name like firstcell, endcell etc.)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder Document&#39;s folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def cells_get_worksheet_cell_with_http_info(name, sheet_name, cell_or_method_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsApi.cells_get_worksheet_cell ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsApi.cells_get_worksheet_cell"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsApi.cells_get_worksheet_cell"
      end
      # verify the required parameter 'cell_or_method_name' is set
      if @api_client.config.client_side_validation && cell_or_method_name.nil?
        fail ArgumentError, "Missing the required parameter 'cell_or_method_name' when calling CellsApi.cells_get_worksheet_cell"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/cells/{cellOrMethodName}".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s).sub('{' + 'cellOrMethodName' + '}', cell_or_method_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsApi#cells_get_worksheet_cell\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read cell's style info.
    # 
    # @param name Document name.
    # @param sheet_name Worksheet name.
    # @param cell_name Cell&#39;s name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder Document&#39;s folder.
    # @option opts [String] :storage storage name.
    # @return [StyleResponse]
    def cells_get_worksheet_cell_style(name, sheet_name, cell_name, opts = {})
      data, _status_code, _headers = cells_get_worksheet_cell_style_with_http_info(name, sheet_name, cell_name, opts)
      return data
    end

    # Read cell&#39;s style info.
    # 
    # @param name Document name.
    # @param sheet_name Worksheet name.
    # @param cell_name Cell&#39;s name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder Document&#39;s folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(StyleResponse, Fixnum, Hash)>] StyleResponse data, response status code and response headers
    def cells_get_worksheet_cell_style_with_http_info(name, sheet_name, cell_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsApi.cells_get_worksheet_cell_style ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsApi.cells_get_worksheet_cell_style"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsApi.cells_get_worksheet_cell_style"
      end
      # verify the required parameter 'cell_name' is set
      if @api_client.config.client_side_validation && cell_name.nil?
        fail ArgumentError, "Missing the required parameter 'cell_name' when calling CellsApi.cells_get_worksheet_cell_style"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/cells/{cellName}/style".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s).sub('{' + 'cellName' + '}', cell_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StyleResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsApi#cells_get_worksheet_cell_style\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get cells info.
    # 
    # @param name Document name.
    # @param sheet_name Worksheet name.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offest Begginig offset. (default to 0)
    # @option opts [Integer] :count Maximum amount of cells in the response. (default to 0)
    # @option opts [String] :folder Document&#39;s folder name.
    # @option opts [String] :storage storage name.
    # @return [CellsResponse]
    def cells_get_worksheet_cells(name, sheet_name, opts = {})
      data, _status_code, _headers = cells_get_worksheet_cells_with_http_info(name, sheet_name, opts)
      return data
    end

    # Get cells info.
    # 
    # @param name Document name.
    # @param sheet_name Worksheet name.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offest Begginig offset.
    # @option opts [Integer] :count Maximum amount of cells in the response.
    # @option opts [String] :folder Document&#39;s folder name.
    # @option opts [String] :storage storage name.
    # @return [Array<(CellsResponse, Fixnum, Hash)>] CellsResponse data, response status code and response headers
    def cells_get_worksheet_cells_with_http_info(name, sheet_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsApi.cells_get_worksheet_cells ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsApi.cells_get_worksheet_cells"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsApi.cells_get_worksheet_cells"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/cells".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'offest'] = opts[:'offest'] if !opts[:'offest'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CellsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsApi#cells_get_worksheet_cells\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read worksheet column data by column's index.
    # 
    # @param name The workbook name.
    # @param sheet_name The worksheet name.
    # @param column_index The column index.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The workbook folder.
    # @option opts [String] :storage storage name.
    # @return [ColumnResponse]
    def cells_get_worksheet_column(name, sheet_name, column_index, opts = {})
      data, _status_code, _headers = cells_get_worksheet_column_with_http_info(name, sheet_name, column_index, opts)
      return data
    end

    # Read worksheet column data by column&#39;s index.
    # 
    # @param name The workbook name.
    # @param sheet_name The worksheet name.
    # @param column_index The column index.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The workbook folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(ColumnResponse, Fixnum, Hash)>] ColumnResponse data, response status code and response headers
    def cells_get_worksheet_column_with_http_info(name, sheet_name, column_index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsApi.cells_get_worksheet_column ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsApi.cells_get_worksheet_column"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsApi.cells_get_worksheet_column"
      end
      # verify the required parameter 'column_index' is set
      if @api_client.config.client_side_validation && column_index.nil?
        fail ArgumentError, "Missing the required parameter 'column_index' when calling CellsApi.cells_get_worksheet_column"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/cells/columns/{columnIndex}".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s).sub('{' + 'columnIndex' + '}', column_index.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ColumnResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsApi#cells_get_worksheet_column\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read worksheet columns info.
    # 
    # @param name The workbook name.
    # @param sheet_name The worksheet name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The workdook folder.
    # @option opts [String] :storage storage name.
    # @return [ColumnsResponse]
    def cells_get_worksheet_columns(name, sheet_name, opts = {})
      data, _status_code, _headers = cells_get_worksheet_columns_with_http_info(name, sheet_name, opts)
      return data
    end

    # Read worksheet columns info.
    # 
    # @param name The workbook name.
    # @param sheet_name The worksheet name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The workdook folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(ColumnsResponse, Fixnum, Hash)>] ColumnsResponse data, response status code and response headers
    def cells_get_worksheet_columns_with_http_info(name, sheet_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsApi.cells_get_worksheet_columns ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsApi.cells_get_worksheet_columns"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsApi.cells_get_worksheet_columns"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/cells/columns".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ColumnsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsApi#cells_get_worksheet_columns\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read worksheet row data by row's index.
    # 
    # @param name The workbook name.
    # @param sheet_name The worksheet name.
    # @param row_index The row index.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The workbook folder.
    # @option opts [String] :storage storage name.
    # @return [RowResponse]
    def cells_get_worksheet_row(name, sheet_name, row_index, opts = {})
      data, _status_code, _headers = cells_get_worksheet_row_with_http_info(name, sheet_name, row_index, opts)
      return data
    end

    # Read worksheet row data by row&#39;s index.
    # 
    # @param name The workbook name.
    # @param sheet_name The worksheet name.
    # @param row_index The row index.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The workbook folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(RowResponse, Fixnum, Hash)>] RowResponse data, response status code and response headers
    def cells_get_worksheet_row_with_http_info(name, sheet_name, row_index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsApi.cells_get_worksheet_row ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsApi.cells_get_worksheet_row"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsApi.cells_get_worksheet_row"
      end
      # verify the required parameter 'row_index' is set
      if @api_client.config.client_side_validation && row_index.nil?
        fail ArgumentError, "Missing the required parameter 'row_index' when calling CellsApi.cells_get_worksheet_row"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/cells/rows/{rowIndex}".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s).sub('{' + 'rowIndex' + '}', row_index.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RowResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsApi#cells_get_worksheet_row\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read worksheet rows info.
    # 
    # @param name The workbook name.
    # @param sheet_name The worksheet name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The workdook folder.
    # @option opts [String] :storage storage name.
    # @return [RowsResponse]
    def cells_get_worksheet_rows(name, sheet_name, opts = {})
      data, _status_code, _headers = cells_get_worksheet_rows_with_http_info(name, sheet_name, opts)
      return data
    end

    # Read worksheet rows info.
    # 
    # @param name The workbook name.
    # @param sheet_name The worksheet name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The workdook folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(RowsResponse, Fixnum, Hash)>] RowsResponse data, response status code and response headers
    def cells_get_worksheet_rows_with_http_info(name, sheet_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsApi.cells_get_worksheet_rows ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsApi.cells_get_worksheet_rows"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsApi.cells_get_worksheet_rows"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/cells/rows".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RowsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsApi#cells_get_worksheet_rows\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cell calculate formula
    # 
    # @param name 
    # @param sheet_name 
    # @param cell_name 
    # @param [Hash] opts the optional parameters
    # @option opts [CalculationOptions] :options 
    # @option opts [String] :folder 
    # @option opts [String] :storage storage name.
    # @return [SaaSposeResponse]
    def cells_post_cell_calculate(name, sheet_name, cell_name, opts = {})
      data, _status_code, _headers = cells_post_cell_calculate_with_http_info(name, sheet_name, cell_name, opts)
      return data
    end

    # Cell calculate formula
    # 
    # @param name 
    # @param sheet_name 
    # @param cell_name 
    # @param [Hash] opts the optional parameters
    # @option opts [CalculationOptions] :options 
    # @option opts [String] :folder 
    # @option opts [String] :storage storage name.
    # @return [Array<(SaaSposeResponse, Fixnum, Hash)>] SaaSposeResponse data, response status code and response headers
    def cells_post_cell_calculate_with_http_info(name, sheet_name, cell_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsApi.cells_post_cell_calculate ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsApi.cells_post_cell_calculate"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsApi.cells_post_cell_calculate"
      end
      # verify the required parameter 'cell_name' is set
      if @api_client.config.client_side_validation && cell_name.nil?
        fail ArgumentError, "Missing the required parameter 'cell_name' when calling CellsApi.cells_post_cell_calculate"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/cells/{cellName}/calculate".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s).sub('{' + 'cellName' + '}', cell_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'options'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SaaSposeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsApi#cells_post_cell_calculate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set cell characters 
    # 
    # @param name 
    # @param sheet_name 
    # @param cell_name 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<FontSetting>] :options 
    # @option opts [String] :folder 
    # @option opts [String] :storage storage name.
    # @return [SaaSposeResponse]
    def cells_post_cell_characters(name, sheet_name, cell_name, opts = {})
      data, _status_code, _headers = cells_post_cell_characters_with_http_info(name, sheet_name, cell_name, opts)
      return data
    end

    # Set cell characters 
    # 
    # @param name 
    # @param sheet_name 
    # @param cell_name 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<FontSetting>] :options 
    # @option opts [String] :folder 
    # @option opts [String] :storage storage name.
    # @return [Array<(SaaSposeResponse, Fixnum, Hash)>] SaaSposeResponse data, response status code and response headers
    def cells_post_cell_characters_with_http_info(name, sheet_name, cell_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsApi.cells_post_cell_characters ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsApi.cells_post_cell_characters"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsApi.cells_post_cell_characters"
      end
      # verify the required parameter 'cell_name' is set
      if @api_client.config.client_side_validation && cell_name.nil?
        fail ArgumentError, "Missing the required parameter 'cell_name' when calling CellsApi.cells_post_cell_characters"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/cells/{cellName}/characters".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s).sub('{' + 'cellName' + '}', cell_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'options'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SaaSposeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsApi#cells_post_cell_characters\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Clear cells contents.
    # 
    # @param name Workbook name.
    # @param sheet_name Worksheet name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :range The range.
    # @option opts [Integer] :start_row The start row.
    # @option opts [Integer] :start_column The start column.
    # @option opts [Integer] :end_row The end row.
    # @option opts [Integer] :end_column The end column.
    # @option opts [String] :folder The workbook folder.
    # @option opts [String] :storage storage name.
    # @return [SaaSposeResponse]
    def cells_post_clear_contents(name, sheet_name, opts = {})
      data, _status_code, _headers = cells_post_clear_contents_with_http_info(name, sheet_name, opts)
      return data
    end

    # Clear cells contents.
    # 
    # @param name Workbook name.
    # @param sheet_name Worksheet name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :range The range.
    # @option opts [Integer] :start_row The start row.
    # @option opts [Integer] :start_column The start column.
    # @option opts [Integer] :end_row The end row.
    # @option opts [Integer] :end_column The end column.
    # @option opts [String] :folder The workbook folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(SaaSposeResponse, Fixnum, Hash)>] SaaSposeResponse data, response status code and response headers
    def cells_post_clear_contents_with_http_info(name, sheet_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsApi.cells_post_clear_contents ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsApi.cells_post_clear_contents"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsApi.cells_post_clear_contents"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/cells/clearcontents".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'range'] = opts[:'range'] if !opts[:'range'].nil?
      query_params[:'startRow'] = opts[:'start_row'] if !opts[:'start_row'].nil?
      query_params[:'startColumn'] = opts[:'start_column'] if !opts[:'start_column'].nil?
      query_params[:'endRow'] = opts[:'end_row'] if !opts[:'end_row'].nil?
      query_params[:'endColumn'] = opts[:'end_column'] if !opts[:'end_column'].nil?
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SaaSposeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsApi#cells_post_clear_contents\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Clear cells contents.
    # 
    # @param name Workbook name.
    # @param sheet_name Worksheet name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :range The range.
    # @option opts [Integer] :start_row The start row.
    # @option opts [Integer] :start_column The start column.
    # @option opts [Integer] :end_row The end row.
    # @option opts [Integer] :end_column The end column.
    # @option opts [String] :folder The workbook folder.
    # @option opts [String] :storage storage name.
    # @return [SaaSposeResponse]
    def cells_post_clear_formats(name, sheet_name, opts = {})
      data, _status_code, _headers = cells_post_clear_formats_with_http_info(name, sheet_name, opts)
      return data
    end

    # Clear cells contents.
    # 
    # @param name Workbook name.
    # @param sheet_name Worksheet name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :range The range.
    # @option opts [Integer] :start_row The start row.
    # @option opts [Integer] :start_column The start column.
    # @option opts [Integer] :end_row The end row.
    # @option opts [Integer] :end_column The end column.
    # @option opts [String] :folder The workbook folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(SaaSposeResponse, Fixnum, Hash)>] SaaSposeResponse data, response status code and response headers
    def cells_post_clear_formats_with_http_info(name, sheet_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsApi.cells_post_clear_formats ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsApi.cells_post_clear_formats"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsApi.cells_post_clear_formats"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/cells/clearformats".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'range'] = opts[:'range'] if !opts[:'range'].nil?
      query_params[:'startRow'] = opts[:'start_row'] if !opts[:'start_row'].nil?
      query_params[:'startColumn'] = opts[:'start_column'] if !opts[:'start_column'].nil?
      query_params[:'endRow'] = opts[:'end_row'] if !opts[:'end_row'].nil?
      query_params[:'endColumn'] = opts[:'end_column'] if !opts[:'end_column'].nil?
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SaaSposeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsApi#cells_post_clear_formats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set column style
    # 
    # @param name The workbook name.
    # @param sheet_name The worksheet name.
    # @param column_index The column index.
    # @param [Hash] opts the optional parameters
    # @option opts [Style] :style Style dto
    # @option opts [String] :folder The workbook folder.
    # @option opts [String] :storage storage name.
    # @return [SaaSposeResponse]
    def cells_post_column_style(name, sheet_name, column_index, opts = {})
      data, _status_code, _headers = cells_post_column_style_with_http_info(name, sheet_name, column_index, opts)
      return data
    end

    # Set column style
    # 
    # @param name The workbook name.
    # @param sheet_name The worksheet name.
    # @param column_index The column index.
    # @param [Hash] opts the optional parameters
    # @option opts [Style] :style Style dto
    # @option opts [String] :folder The workbook folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(SaaSposeResponse, Fixnum, Hash)>] SaaSposeResponse data, response status code and response headers
    def cells_post_column_style_with_http_info(name, sheet_name, column_index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsApi.cells_post_column_style ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsApi.cells_post_column_style"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsApi.cells_post_column_style"
      end
      # verify the required parameter 'column_index' is set
      if @api_client.config.client_side_validation && column_index.nil?
        fail ArgumentError, "Missing the required parameter 'column_index' when calling CellsApi.cells_post_column_style"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/cells/columns/{columnIndex}/style".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s).sub('{' + 'columnIndex' + '}', column_index.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'style'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SaaSposeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsApi#cells_post_column_style\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Copy cell into cell
    # 
    # @param name Workbook name.
    # @param dest_cell_name Destination cell name
    # @param sheet_name Destination worksheet name.
    # @param worksheet Source worksheet name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cellname Source cell name
    # @option opts [Integer] :row Source row
    # @option opts [Integer] :column Source column
    # @option opts [String] :folder Folder name
    # @option opts [String] :storage storage name.
    # @return [SaaSposeResponse]
    def cells_post_copy_cell_into_cell(name, dest_cell_name, sheet_name, worksheet, opts = {})
      data, _status_code, _headers = cells_post_copy_cell_into_cell_with_http_info(name, dest_cell_name, sheet_name, worksheet, opts)
      return data
    end

    # Copy cell into cell
    # 
    # @param name Workbook name.
    # @param dest_cell_name Destination cell name
    # @param sheet_name Destination worksheet name.
    # @param worksheet Source worksheet name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cellname Source cell name
    # @option opts [Integer] :row Source row
    # @option opts [Integer] :column Source column
    # @option opts [String] :folder Folder name
    # @option opts [String] :storage storage name.
    # @return [Array<(SaaSposeResponse, Fixnum, Hash)>] SaaSposeResponse data, response status code and response headers
    def cells_post_copy_cell_into_cell_with_http_info(name, dest_cell_name, sheet_name, worksheet, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsApi.cells_post_copy_cell_into_cell ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsApi.cells_post_copy_cell_into_cell"
      end
      # verify the required parameter 'dest_cell_name' is set
      if @api_client.config.client_side_validation && dest_cell_name.nil?
        fail ArgumentError, "Missing the required parameter 'dest_cell_name' when calling CellsApi.cells_post_copy_cell_into_cell"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsApi.cells_post_copy_cell_into_cell"
      end
      # verify the required parameter 'worksheet' is set
      if @api_client.config.client_side_validation && worksheet.nil?
        fail ArgumentError, "Missing the required parameter 'worksheet' when calling CellsApi.cells_post_copy_cell_into_cell"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/cells/{destCellName}/copy".sub('{' + 'name' + '}', name.to_s).sub('{' + 'destCellName' + '}', dest_cell_name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'worksheet'] = worksheet
      query_params[:'cellname'] = opts[:'cellname'] if !opts[:'cellname'].nil?
      query_params[:'row'] = opts[:'row'] if !opts[:'row'].nil?
      query_params[:'column'] = opts[:'column'] if !opts[:'column'].nil?
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SaaSposeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsApi#cells_post_copy_cell_into_cell\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Copy worksheet columns.
    # 
    # @param name The workbook name.
    # @param sheet_name The worksheet name.
    # @param source_column_index Source column index
    # @param destination_column_index Destination column index
    # @param column_number The copied column number
    # @param [Hash] opts the optional parameters
    # @option opts [String] :worksheet The Worksheet (default to )
    # @option opts [String] :folder The document folder.
    # @option opts [String] :storage storage name.
    # @return [SaaSposeResponse]
    def cells_post_copy_worksheet_columns(name, sheet_name, source_column_index, destination_column_index, column_number, opts = {})
      data, _status_code, _headers = cells_post_copy_worksheet_columns_with_http_info(name, sheet_name, source_column_index, destination_column_index, column_number, opts)
      return data
    end

    # Copy worksheet columns.
    # 
    # @param name The workbook name.
    # @param sheet_name The worksheet name.
    # @param source_column_index Source column index
    # @param destination_column_index Destination column index
    # @param column_number The copied column number
    # @param [Hash] opts the optional parameters
    # @option opts [String] :worksheet The Worksheet
    # @option opts [String] :folder The document folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(SaaSposeResponse, Fixnum, Hash)>] SaaSposeResponse data, response status code and response headers
    def cells_post_copy_worksheet_columns_with_http_info(name, sheet_name, source_column_index, destination_column_index, column_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsApi.cells_post_copy_worksheet_columns ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsApi.cells_post_copy_worksheet_columns"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsApi.cells_post_copy_worksheet_columns"
      end
      # verify the required parameter 'source_column_index' is set
      if @api_client.config.client_side_validation && source_column_index.nil?
        fail ArgumentError, "Missing the required parameter 'source_column_index' when calling CellsApi.cells_post_copy_worksheet_columns"
      end
      # verify the required parameter 'destination_column_index' is set
      if @api_client.config.client_side_validation && destination_column_index.nil?
        fail ArgumentError, "Missing the required parameter 'destination_column_index' when calling CellsApi.cells_post_copy_worksheet_columns"
      end
      # verify the required parameter 'column_number' is set
      if @api_client.config.client_side_validation && column_number.nil?
        fail ArgumentError, "Missing the required parameter 'column_number' when calling CellsApi.cells_post_copy_worksheet_columns"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/cells/columns/copy".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'sourceColumnIndex'] = source_column_index
      query_params[:'destinationColumnIndex'] = destination_column_index
      query_params[:'columnNumber'] = column_number
      query_params[:'worksheet'] = opts[:'worksheet'] if !opts[:'worksheet'].nil?
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SaaSposeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsApi#cells_post_copy_worksheet_columns\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Copy worksheet rows.
    # 
    # @param name The workbook name.
    # @param sheet_name The worksheet name.
    # @param source_row_index Source row index
    # @param destination_row_index Destination row index
    # @param row_number The copied row number
    # @param [Hash] opts the optional parameters
    # @option opts [String] :worksheet worksheet
    # @option opts [String] :folder The document folder.
    # @option opts [String] :storage storage name.
    # @return [SaaSposeResponse]
    def cells_post_copy_worksheet_rows(name, sheet_name, source_row_index, destination_row_index, row_number, opts = {})
      data, _status_code, _headers = cells_post_copy_worksheet_rows_with_http_info(name, sheet_name, source_row_index, destination_row_index, row_number, opts)
      return data
    end

    # Copy worksheet rows.
    # 
    # @param name The workbook name.
    # @param sheet_name The worksheet name.
    # @param source_row_index Source row index
    # @param destination_row_index Destination row index
    # @param row_number The copied row number
    # @param [Hash] opts the optional parameters
    # @option opts [String] :worksheet worksheet
    # @option opts [String] :folder The document folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(SaaSposeResponse, Fixnum, Hash)>] SaaSposeResponse data, response status code and response headers
    def cells_post_copy_worksheet_rows_with_http_info(name, sheet_name, source_row_index, destination_row_index, row_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsApi.cells_post_copy_worksheet_rows ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsApi.cells_post_copy_worksheet_rows"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsApi.cells_post_copy_worksheet_rows"
      end
      # verify the required parameter 'source_row_index' is set
      if @api_client.config.client_side_validation && source_row_index.nil?
        fail ArgumentError, "Missing the required parameter 'source_row_index' when calling CellsApi.cells_post_copy_worksheet_rows"
      end
      # verify the required parameter 'destination_row_index' is set
      if @api_client.config.client_side_validation && destination_row_index.nil?
        fail ArgumentError, "Missing the required parameter 'destination_row_index' when calling CellsApi.cells_post_copy_worksheet_rows"
      end
      # verify the required parameter 'row_number' is set
      if @api_client.config.client_side_validation && row_number.nil?
        fail ArgumentError, "Missing the required parameter 'row_number' when calling CellsApi.cells_post_copy_worksheet_rows"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/cells/rows/copy".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'sourceRowIndex'] = source_row_index
      query_params[:'destinationRowIndex'] = destination_row_index
      query_params[:'rowNumber'] = row_number
      query_params[:'worksheet'] = opts[:'worksheet'] if !opts[:'worksheet'].nil?
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SaaSposeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsApi#cells_post_copy_worksheet_rows\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Group worksheet columns.
    # 
    # @param name The workbook name.
    # @param sheet_name The worksheet name.
    # @param first_index The first column index to be operated.
    # @param last_index The last column index to be operated.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :hide columns visible state
    # @option opts [String] :folder The document folder.
    # @option opts [String] :storage storage name.
    # @return [SaaSposeResponse]
    def cells_post_group_worksheet_columns(name, sheet_name, first_index, last_index, opts = {})
      data, _status_code, _headers = cells_post_group_worksheet_columns_with_http_info(name, sheet_name, first_index, last_index, opts)
      return data
    end

    # Group worksheet columns.
    # 
    # @param name The workbook name.
    # @param sheet_name The worksheet name.
    # @param first_index The first column index to be operated.
    # @param last_index The last column index to be operated.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :hide columns visible state
    # @option opts [String] :folder The document folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(SaaSposeResponse, Fixnum, Hash)>] SaaSposeResponse data, response status code and response headers
    def cells_post_group_worksheet_columns_with_http_info(name, sheet_name, first_index, last_index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsApi.cells_post_group_worksheet_columns ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsApi.cells_post_group_worksheet_columns"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsApi.cells_post_group_worksheet_columns"
      end
      # verify the required parameter 'first_index' is set
      if @api_client.config.client_side_validation && first_index.nil?
        fail ArgumentError, "Missing the required parameter 'first_index' when calling CellsApi.cells_post_group_worksheet_columns"
      end
      # verify the required parameter 'last_index' is set
      if @api_client.config.client_side_validation && last_index.nil?
        fail ArgumentError, "Missing the required parameter 'last_index' when calling CellsApi.cells_post_group_worksheet_columns"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/cells/columns/group".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'firstIndex'] = first_index
      query_params[:'lastIndex'] = last_index
      query_params[:'hide'] = opts[:'hide'] if !opts[:'hide'].nil?
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SaaSposeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsApi#cells_post_group_worksheet_columns\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Group worksheet rows.
    # 
    # @param name The workbook name.
    # @param sheet_name The worksheet name.
    # @param first_index The first row index to be operated.
    # @param last_index The last row index to be operated.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :hide rows visible state
    # @option opts [String] :folder The document folder.
    # @option opts [String] :storage storage name.
    # @return [SaaSposeResponse]
    def cells_post_group_worksheet_rows(name, sheet_name, first_index, last_index, opts = {})
      data, _status_code, _headers = cells_post_group_worksheet_rows_with_http_info(name, sheet_name, first_index, last_index, opts)
      return data
    end

    # Group worksheet rows.
    # 
    # @param name The workbook name.
    # @param sheet_name The worksheet name.
    # @param first_index The first row index to be operated.
    # @param last_index The last row index to be operated.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :hide rows visible state
    # @option opts [String] :folder The document folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(SaaSposeResponse, Fixnum, Hash)>] SaaSposeResponse data, response status code and response headers
    def cells_post_group_worksheet_rows_with_http_info(name, sheet_name, first_index, last_index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsApi.cells_post_group_worksheet_rows ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsApi.cells_post_group_worksheet_rows"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsApi.cells_post_group_worksheet_rows"
      end
      # verify the required parameter 'first_index' is set
      if @api_client.config.client_side_validation && first_index.nil?
        fail ArgumentError, "Missing the required parameter 'first_index' when calling CellsApi.cells_post_group_worksheet_rows"
      end
      # verify the required parameter 'last_index' is set
      if @api_client.config.client_side_validation && last_index.nil?
        fail ArgumentError, "Missing the required parameter 'last_index' when calling CellsApi.cells_post_group_worksheet_rows"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/cells/rows/group".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'firstIndex'] = first_index
      query_params[:'lastIndex'] = last_index
      query_params[:'hide'] = opts[:'hide'] if !opts[:'hide'].nil?
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SaaSposeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsApi#cells_post_group_worksheet_rows\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Hide worksheet columns.
    # 
    # @param name The workbook name.
    # @param sheet_name The worksheet name.
    # @param start_column The begin column index to be operated.
    # @param total_columns Number of columns to be operated.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The document folder.
    # @option opts [String] :storage storage name.
    # @return [SaaSposeResponse]
    def cells_post_hide_worksheet_columns(name, sheet_name, start_column, total_columns, opts = {})
      data, _status_code, _headers = cells_post_hide_worksheet_columns_with_http_info(name, sheet_name, start_column, total_columns, opts)
      return data
    end

    # Hide worksheet columns.
    # 
    # @param name The workbook name.
    # @param sheet_name The worksheet name.
    # @param start_column The begin column index to be operated.
    # @param total_columns Number of columns to be operated.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The document folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(SaaSposeResponse, Fixnum, Hash)>] SaaSposeResponse data, response status code and response headers
    def cells_post_hide_worksheet_columns_with_http_info(name, sheet_name, start_column, total_columns, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsApi.cells_post_hide_worksheet_columns ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsApi.cells_post_hide_worksheet_columns"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsApi.cells_post_hide_worksheet_columns"
      end
      # verify the required parameter 'start_column' is set
      if @api_client.config.client_side_validation && start_column.nil?
        fail ArgumentError, "Missing the required parameter 'start_column' when calling CellsApi.cells_post_hide_worksheet_columns"
      end
      # verify the required parameter 'total_columns' is set
      if @api_client.config.client_side_validation && total_columns.nil?
        fail ArgumentError, "Missing the required parameter 'total_columns' when calling CellsApi.cells_post_hide_worksheet_columns"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/cells/columns/hide".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'startColumn'] = start_column
      query_params[:'totalColumns'] = total_columns
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SaaSposeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsApi#cells_post_hide_worksheet_columns\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Hide worksheet rows.
    # 
    # @param name The workbook name.
    # @param sheet_name The worksheet name.
    # @param startrow The begin row index to be operated.
    # @param total_rows Number of rows to be operated.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The document folder.
    # @option opts [String] :storage storage name.
    # @return [SaaSposeResponse]
    def cells_post_hide_worksheet_rows(name, sheet_name, startrow, total_rows, opts = {})
      data, _status_code, _headers = cells_post_hide_worksheet_rows_with_http_info(name, sheet_name, startrow, total_rows, opts)
      return data
    end

    # Hide worksheet rows.
    # 
    # @param name The workbook name.
    # @param sheet_name The worksheet name.
    # @param startrow The begin row index to be operated.
    # @param total_rows Number of rows to be operated.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The document folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(SaaSposeResponse, Fixnum, Hash)>] SaaSposeResponse data, response status code and response headers
    def cells_post_hide_worksheet_rows_with_http_info(name, sheet_name, startrow, total_rows, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsApi.cells_post_hide_worksheet_rows ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsApi.cells_post_hide_worksheet_rows"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsApi.cells_post_hide_worksheet_rows"
      end
      # verify the required parameter 'startrow' is set
      if @api_client.config.client_side_validation && startrow.nil?
        fail ArgumentError, "Missing the required parameter 'startrow' when calling CellsApi.cells_post_hide_worksheet_rows"
      end
      # verify the required parameter 'total_rows' is set
      if @api_client.config.client_side_validation && total_rows.nil?
        fail ArgumentError, "Missing the required parameter 'total_rows' when calling CellsApi.cells_post_hide_worksheet_rows"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/cells/rows/hide".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'startrow'] = startrow
      query_params[:'totalRows'] = total_rows
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SaaSposeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsApi#cells_post_hide_worksheet_rows\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set row style.
    # 
    # @param name The workbook name.
    # @param sheet_name The worksheet name.
    # @param row_index The row index.
    # @param [Hash] opts the optional parameters
    # @option opts [Style] :style Style dto
    # @option opts [String] :folder The document folder.
    # @option opts [String] :storage storage name.
    # @return [SaaSposeResponse]
    def cells_post_row_style(name, sheet_name, row_index, opts = {})
      data, _status_code, _headers = cells_post_row_style_with_http_info(name, sheet_name, row_index, opts)
      return data
    end

    # Set row style.
    # 
    # @param name The workbook name.
    # @param sheet_name The worksheet name.
    # @param row_index The row index.
    # @param [Hash] opts the optional parameters
    # @option opts [Style] :style Style dto
    # @option opts [String] :folder The document folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(SaaSposeResponse, Fixnum, Hash)>] SaaSposeResponse data, response status code and response headers
    def cells_post_row_style_with_http_info(name, sheet_name, row_index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsApi.cells_post_row_style ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsApi.cells_post_row_style"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsApi.cells_post_row_style"
      end
      # verify the required parameter 'row_index' is set
      if @api_client.config.client_side_validation && row_index.nil?
        fail ArgumentError, "Missing the required parameter 'row_index' when calling CellsApi.cells_post_row_style"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/cells/rows/{rowIndex}/style".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s).sub('{' + 'rowIndex' + '}', row_index.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'style'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SaaSposeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsApi#cells_post_row_style\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set htmlstring value into cell
    # 
    # @param name Workbook name.
    # @param sheet_name Worksheet name.
    # @param cell_name The cell name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The workbook folder.
    # @option opts [String] :storage storage name.
    # @return [CellResponse]
    def cells_post_set_cell_html_string(name, sheet_name, cell_name, opts = {})
      data, _status_code, _headers = cells_post_set_cell_html_string_with_http_info(name, sheet_name, cell_name, opts)
      return data
    end

    # Set htmlstring value into cell
    # 
    # @param name Workbook name.
    # @param sheet_name Worksheet name.
    # @param cell_name The cell name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The workbook folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(CellResponse, Fixnum, Hash)>] CellResponse data, response status code and response headers
    def cells_post_set_cell_html_string_with_http_info(name, sheet_name, cell_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsApi.cells_post_set_cell_html_string ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsApi.cells_post_set_cell_html_string"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsApi.cells_post_set_cell_html_string"
      end
      # verify the required parameter 'cell_name' is set
      if @api_client.config.client_side_validation && cell_name.nil?
        fail ArgumentError, "Missing the required parameter 'cell_name' when calling CellsApi.cells_post_set_cell_html_string"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/cells/{cellName}/htmlstring".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s).sub('{' + 'cellName' + '}', cell_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CellResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsApi#cells_post_set_cell_html_string\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set cell range value 
    # 
    # @param name Workbook name.
    # @param sheet_name Worksheet name.
    # @param cellarea Cell area (like \&quot;A1:C2\&quot;)
    # @param value Range value
    # @param type Value data type (like \&quot;int\&quot;)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder Folder name
    # @option opts [String] :storage storage name.
    # @return [SaaSposeResponse]
    def cells_post_set_cell_range_value(name, sheet_name, cellarea, value, type, opts = {})
      data, _status_code, _headers = cells_post_set_cell_range_value_with_http_info(name, sheet_name, cellarea, value, type, opts)
      return data
    end

    # Set cell range value 
    # 
    # @param name Workbook name.
    # @param sheet_name Worksheet name.
    # @param cellarea Cell area (like \&quot;A1:C2\&quot;)
    # @param value Range value
    # @param type Value data type (like \&quot;int\&quot;)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder Folder name
    # @option opts [String] :storage storage name.
    # @return [Array<(SaaSposeResponse, Fixnum, Hash)>] SaaSposeResponse data, response status code and response headers
    def cells_post_set_cell_range_value_with_http_info(name, sheet_name, cellarea, value, type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsApi.cells_post_set_cell_range_value ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsApi.cells_post_set_cell_range_value"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsApi.cells_post_set_cell_range_value"
      end
      # verify the required parameter 'cellarea' is set
      if @api_client.config.client_side_validation && cellarea.nil?
        fail ArgumentError, "Missing the required parameter 'cellarea' when calling CellsApi.cells_post_set_cell_range_value"
      end
      # verify the required parameter 'value' is set
      if @api_client.config.client_side_validation && value.nil?
        fail ArgumentError, "Missing the required parameter 'value' when calling CellsApi.cells_post_set_cell_range_value"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling CellsApi.cells_post_set_cell_range_value"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/cells".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'cellarea'] = cellarea
      query_params[:'value'] = value
      query_params[:'type'] = type
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SaaSposeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsApi#cells_post_set_cell_range_value\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set worksheet column width.
    # 
    # @param name The workbook name.
    # @param sheet_name The worksheet name.
    # @param column_index The column index.
    # @param width The width.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The workbook folder.
    # @option opts [String] :storage storage name.
    # @return [ColumnResponse]
    def cells_post_set_worksheet_column_width(name, sheet_name, column_index, width, opts = {})
      data, _status_code, _headers = cells_post_set_worksheet_column_width_with_http_info(name, sheet_name, column_index, width, opts)
      return data
    end

    # Set worksheet column width.
    # 
    # @param name The workbook name.
    # @param sheet_name The worksheet name.
    # @param column_index The column index.
    # @param width The width.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The workbook folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(ColumnResponse, Fixnum, Hash)>] ColumnResponse data, response status code and response headers
    def cells_post_set_worksheet_column_width_with_http_info(name, sheet_name, column_index, width, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsApi.cells_post_set_worksheet_column_width ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsApi.cells_post_set_worksheet_column_width"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsApi.cells_post_set_worksheet_column_width"
      end
      # verify the required parameter 'column_index' is set
      if @api_client.config.client_side_validation && column_index.nil?
        fail ArgumentError, "Missing the required parameter 'column_index' when calling CellsApi.cells_post_set_worksheet_column_width"
      end
      # verify the required parameter 'width' is set
      if @api_client.config.client_side_validation && width.nil?
        fail ArgumentError, "Missing the required parameter 'width' when calling CellsApi.cells_post_set_worksheet_column_width"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/cells/columns/{columnIndex}".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s).sub('{' + 'columnIndex' + '}', column_index.to_s)

      # query parameters
      query_params = {}
      query_params[:'width'] = width
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ColumnResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsApi#cells_post_set_worksheet_column_width\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Ungroup worksheet columns.
    # 
    # @param name The workbook name.
    # @param sheet_name The worksheet name.
    # @param first_index The first column index to be operated.
    # @param last_index The last column index to be operated.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The document folder.
    # @option opts [String] :storage storage name.
    # @return [SaaSposeResponse]
    def cells_post_ungroup_worksheet_columns(name, sheet_name, first_index, last_index, opts = {})
      data, _status_code, _headers = cells_post_ungroup_worksheet_columns_with_http_info(name, sheet_name, first_index, last_index, opts)
      return data
    end

    # Ungroup worksheet columns.
    # 
    # @param name The workbook name.
    # @param sheet_name The worksheet name.
    # @param first_index The first column index to be operated.
    # @param last_index The last column index to be operated.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The document folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(SaaSposeResponse, Fixnum, Hash)>] SaaSposeResponse data, response status code and response headers
    def cells_post_ungroup_worksheet_columns_with_http_info(name, sheet_name, first_index, last_index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsApi.cells_post_ungroup_worksheet_columns ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsApi.cells_post_ungroup_worksheet_columns"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsApi.cells_post_ungroup_worksheet_columns"
      end
      # verify the required parameter 'first_index' is set
      if @api_client.config.client_side_validation && first_index.nil?
        fail ArgumentError, "Missing the required parameter 'first_index' when calling CellsApi.cells_post_ungroup_worksheet_columns"
      end
      # verify the required parameter 'last_index' is set
      if @api_client.config.client_side_validation && last_index.nil?
        fail ArgumentError, "Missing the required parameter 'last_index' when calling CellsApi.cells_post_ungroup_worksheet_columns"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/cells/columns/ungroup".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'firstIndex'] = first_index
      query_params[:'lastIndex'] = last_index
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SaaSposeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsApi#cells_post_ungroup_worksheet_columns\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Ungroup worksheet rows.
    # 
    # @param name The workbook name.
    # @param sheet_name The worksheet name.
    # @param first_index The first row index to be operated.
    # @param last_index The last row index to be operated.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :is_all Is all row to be operated
    # @option opts [String] :folder The document folder.
    # @option opts [String] :storage storage name.
    # @return [SaaSposeResponse]
    def cells_post_ungroup_worksheet_rows(name, sheet_name, first_index, last_index, opts = {})
      data, _status_code, _headers = cells_post_ungroup_worksheet_rows_with_http_info(name, sheet_name, first_index, last_index, opts)
      return data
    end

    # Ungroup worksheet rows.
    # 
    # @param name The workbook name.
    # @param sheet_name The worksheet name.
    # @param first_index The first row index to be operated.
    # @param last_index The last row index to be operated.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :is_all Is all row to be operated
    # @option opts [String] :folder The document folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(SaaSposeResponse, Fixnum, Hash)>] SaaSposeResponse data, response status code and response headers
    def cells_post_ungroup_worksheet_rows_with_http_info(name, sheet_name, first_index, last_index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsApi.cells_post_ungroup_worksheet_rows ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsApi.cells_post_ungroup_worksheet_rows"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsApi.cells_post_ungroup_worksheet_rows"
      end
      # verify the required parameter 'first_index' is set
      if @api_client.config.client_side_validation && first_index.nil?
        fail ArgumentError, "Missing the required parameter 'first_index' when calling CellsApi.cells_post_ungroup_worksheet_rows"
      end
      # verify the required parameter 'last_index' is set
      if @api_client.config.client_side_validation && last_index.nil?
        fail ArgumentError, "Missing the required parameter 'last_index' when calling CellsApi.cells_post_ungroup_worksheet_rows"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/cells/rows/ungroup".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'firstIndex'] = first_index
      query_params[:'lastIndex'] = last_index
      query_params[:'isAll'] = opts[:'is_all'] if !opts[:'is_all'].nil?
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SaaSposeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsApi#cells_post_ungroup_worksheet_rows\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unhide worksheet columns.
    # 
    # @param name The workbook name.
    # @param sheet_name The worksheet name.
    # @param startcolumn The begin column index to be operated.
    # @param total_columns Number of columns to be operated.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :width The new column width. (default to 50.0)
    # @option opts [String] :folder The document folder.
    # @option opts [String] :storage storage name.
    # @return [SaaSposeResponse]
    def cells_post_unhide_worksheet_columns(name, sheet_name, startcolumn, total_columns, opts = {})
      data, _status_code, _headers = cells_post_unhide_worksheet_columns_with_http_info(name, sheet_name, startcolumn, total_columns, opts)
      return data
    end

    # Unhide worksheet columns.
    # 
    # @param name The workbook name.
    # @param sheet_name The worksheet name.
    # @param startcolumn The begin column index to be operated.
    # @param total_columns Number of columns to be operated.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :width The new column width.
    # @option opts [String] :folder The document folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(SaaSposeResponse, Fixnum, Hash)>] SaaSposeResponse data, response status code and response headers
    def cells_post_unhide_worksheet_columns_with_http_info(name, sheet_name, startcolumn, total_columns, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsApi.cells_post_unhide_worksheet_columns ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsApi.cells_post_unhide_worksheet_columns"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsApi.cells_post_unhide_worksheet_columns"
      end
      # verify the required parameter 'startcolumn' is set
      if @api_client.config.client_side_validation && startcolumn.nil?
        fail ArgumentError, "Missing the required parameter 'startcolumn' when calling CellsApi.cells_post_unhide_worksheet_columns"
      end
      # verify the required parameter 'total_columns' is set
      if @api_client.config.client_side_validation && total_columns.nil?
        fail ArgumentError, "Missing the required parameter 'total_columns' when calling CellsApi.cells_post_unhide_worksheet_columns"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/cells/columns/unhide".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'startcolumn'] = startcolumn
      query_params[:'totalColumns'] = total_columns
      query_params[:'width'] = opts[:'width'] if !opts[:'width'].nil?
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SaaSposeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsApi#cells_post_unhide_worksheet_columns\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unhide worksheet rows.
    # 
    # @param name The workbook name.
    # @param sheet_name The worksheet name.
    # @param startrow The begin row index to be operated.
    # @param total_rows Number of rows to be operated.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :height The new row height. (default to 15.0)
    # @option opts [String] :folder The document folder.
    # @option opts [String] :storage storage name.
    # @return [SaaSposeResponse]
    def cells_post_unhide_worksheet_rows(name, sheet_name, startrow, total_rows, opts = {})
      data, _status_code, _headers = cells_post_unhide_worksheet_rows_with_http_info(name, sheet_name, startrow, total_rows, opts)
      return data
    end

    # Unhide worksheet rows.
    # 
    # @param name The workbook name.
    # @param sheet_name The worksheet name.
    # @param startrow The begin row index to be operated.
    # @param total_rows Number of rows to be operated.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :height The new row height.
    # @option opts [String] :folder The document folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(SaaSposeResponse, Fixnum, Hash)>] SaaSposeResponse data, response status code and response headers
    def cells_post_unhide_worksheet_rows_with_http_info(name, sheet_name, startrow, total_rows, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsApi.cells_post_unhide_worksheet_rows ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsApi.cells_post_unhide_worksheet_rows"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsApi.cells_post_unhide_worksheet_rows"
      end
      # verify the required parameter 'startrow' is set
      if @api_client.config.client_side_validation && startrow.nil?
        fail ArgumentError, "Missing the required parameter 'startrow' when calling CellsApi.cells_post_unhide_worksheet_rows"
      end
      # verify the required parameter 'total_rows' is set
      if @api_client.config.client_side_validation && total_rows.nil?
        fail ArgumentError, "Missing the required parameter 'total_rows' when calling CellsApi.cells_post_unhide_worksheet_rows"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/cells/rows/unhide".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'startrow'] = startrow
      query_params[:'totalRows'] = total_rows
      query_params[:'height'] = opts[:'height'] if !opts[:'height'].nil?
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SaaSposeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsApi#cells_post_unhide_worksheet_rows\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update cell's style.
    # 
    # @param name Workbook name.
    # @param sheet_name Worksheet name.
    # @param cell_name The cell name.
    # @param [Hash] opts the optional parameters
    # @option opts [Style] :style with update style settings.
    # @option opts [String] :folder The workbook folder.
    # @option opts [String] :storage storage name.
    # @return [StyleResponse]
    def cells_post_update_worksheet_cell_style(name, sheet_name, cell_name, opts = {})
      data, _status_code, _headers = cells_post_update_worksheet_cell_style_with_http_info(name, sheet_name, cell_name, opts)
      return data
    end

    # Update cell&#39;s style.
    # 
    # @param name Workbook name.
    # @param sheet_name Worksheet name.
    # @param cell_name The cell name.
    # @param [Hash] opts the optional parameters
    # @option opts [Style] :style with update style settings.
    # @option opts [String] :folder The workbook folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(StyleResponse, Fixnum, Hash)>] StyleResponse data, response status code and response headers
    def cells_post_update_worksheet_cell_style_with_http_info(name, sheet_name, cell_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsApi.cells_post_update_worksheet_cell_style ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsApi.cells_post_update_worksheet_cell_style"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsApi.cells_post_update_worksheet_cell_style"
      end
      # verify the required parameter 'cell_name' is set
      if @api_client.config.client_side_validation && cell_name.nil?
        fail ArgumentError, "Missing the required parameter 'cell_name' when calling CellsApi.cells_post_update_worksheet_cell_style"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/cells/{cellName}/style".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s).sub('{' + 'cellName' + '}', cell_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'style'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StyleResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsApi#cells_post_update_worksheet_cell_style\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update cell's range style.
    # 
    # @param name Workbook name.
    # @param sheet_name Worksheet name.
    # @param range The range.
    # @param [Hash] opts the optional parameters
    # @option opts [Style] :style with update style settings.
    # @option opts [String] :folder The workbook folder.
    # @option opts [String] :storage storage name.
    # @return [SaaSposeResponse]
    def cells_post_update_worksheet_range_style(name, sheet_name, range, opts = {})
      data, _status_code, _headers = cells_post_update_worksheet_range_style_with_http_info(name, sheet_name, range, opts)
      return data
    end

    # Update cell&#39;s range style.
    # 
    # @param name Workbook name.
    # @param sheet_name Worksheet name.
    # @param range The range.
    # @param [Hash] opts the optional parameters
    # @option opts [Style] :style with update style settings.
    # @option opts [String] :folder The workbook folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(SaaSposeResponse, Fixnum, Hash)>] SaaSposeResponse data, response status code and response headers
    def cells_post_update_worksheet_range_style_with_http_info(name, sheet_name, range, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsApi.cells_post_update_worksheet_range_style ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsApi.cells_post_update_worksheet_range_style"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsApi.cells_post_update_worksheet_range_style"
      end
      # verify the required parameter 'range' is set
      if @api_client.config.client_side_validation && range.nil?
        fail ArgumentError, "Missing the required parameter 'range' when calling CellsApi.cells_post_update_worksheet_range_style"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/cells/style".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'range'] = range
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'style'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SaaSposeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsApi#cells_post_update_worksheet_range_style\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update worksheet row.
    # 
    # @param name The workbook name.
    # @param sheet_name The worksheet name.
    # @param row_index The row index.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :height The new row height. (default to 0.0)
    # @option opts [String] :folder The document folder.
    # @option opts [String] :storage storage name.
    # @return [RowResponse]
    def cells_post_update_worksheet_row(name, sheet_name, row_index, opts = {})
      data, _status_code, _headers = cells_post_update_worksheet_row_with_http_info(name, sheet_name, row_index, opts)
      return data
    end

    # Update worksheet row.
    # 
    # @param name The workbook name.
    # @param sheet_name The worksheet name.
    # @param row_index The row index.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :height The new row height.
    # @option opts [String] :folder The document folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(RowResponse, Fixnum, Hash)>] RowResponse data, response status code and response headers
    def cells_post_update_worksheet_row_with_http_info(name, sheet_name, row_index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsApi.cells_post_update_worksheet_row ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsApi.cells_post_update_worksheet_row"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsApi.cells_post_update_worksheet_row"
      end
      # verify the required parameter 'row_index' is set
      if @api_client.config.client_side_validation && row_index.nil?
        fail ArgumentError, "Missing the required parameter 'row_index' when calling CellsApi.cells_post_update_worksheet_row"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/cells/rows/{rowIndex}".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s).sub('{' + 'rowIndex' + '}', row_index.to_s)

      # query parameters
      query_params = {}
      query_params[:'height'] = opts[:'height'] if !opts[:'height'].nil?
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RowResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsApi#cells_post_update_worksheet_row\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set cell value.
    # 
    # @param name The document name.
    # @param sheet_name The worksheet name.
    # @param cell_name The cell name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :value The cell value.
    # @option opts [String] :type The value type.
    # @option opts [String] :formula Formula for cell
    # @option opts [String] :folder The document folder.
    # @option opts [String] :storage storage name.
    # @return [CellResponse]
    def cells_post_worksheet_cell_set_value(name, sheet_name, cell_name, opts = {})
      data, _status_code, _headers = cells_post_worksheet_cell_set_value_with_http_info(name, sheet_name, cell_name, opts)
      return data
    end

    # Set cell value.
    # 
    # @param name The document name.
    # @param sheet_name The worksheet name.
    # @param cell_name The cell name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :value The cell value.
    # @option opts [String] :type The value type.
    # @option opts [String] :formula Formula for cell
    # @option opts [String] :folder The document folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(CellResponse, Fixnum, Hash)>] CellResponse data, response status code and response headers
    def cells_post_worksheet_cell_set_value_with_http_info(name, sheet_name, cell_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsApi.cells_post_worksheet_cell_set_value ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsApi.cells_post_worksheet_cell_set_value"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsApi.cells_post_worksheet_cell_set_value"
      end
      # verify the required parameter 'cell_name' is set
      if @api_client.config.client_side_validation && cell_name.nil?
        fail ArgumentError, "Missing the required parameter 'cell_name' when calling CellsApi.cells_post_worksheet_cell_set_value"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/cells/{cellName}".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s).sub('{' + 'cellName' + '}', cell_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'value'] = opts[:'value'] if !opts[:'value'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'formula'] = opts[:'formula'] if !opts[:'formula'].nil?
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CellResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsApi#cells_post_worksheet_cell_set_value\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Merge cells.
    # 
    # @param name The workbook name.
    # @param sheet_name The worksheet name.
    # @param start_row The start row.
    # @param start_column The start column.
    # @param total_rows The total rows
    # @param total_columns The total columns.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The workbook folder.
    # @option opts [String] :storage storage name.
    # @return [SaaSposeResponse]
    def cells_post_worksheet_merge(name, sheet_name, start_row, start_column, total_rows, total_columns, opts = {})
      data, _status_code, _headers = cells_post_worksheet_merge_with_http_info(name, sheet_name, start_row, start_column, total_rows, total_columns, opts)
      return data
    end

    # Merge cells.
    # 
    # @param name The workbook name.
    # @param sheet_name The worksheet name.
    # @param start_row The start row.
    # @param start_column The start column.
    # @param total_rows The total rows
    # @param total_columns The total columns.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The workbook folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(SaaSposeResponse, Fixnum, Hash)>] SaaSposeResponse data, response status code and response headers
    def cells_post_worksheet_merge_with_http_info(name, sheet_name, start_row, start_column, total_rows, total_columns, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsApi.cells_post_worksheet_merge ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsApi.cells_post_worksheet_merge"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsApi.cells_post_worksheet_merge"
      end
      # verify the required parameter 'start_row' is set
      if @api_client.config.client_side_validation && start_row.nil?
        fail ArgumentError, "Missing the required parameter 'start_row' when calling CellsApi.cells_post_worksheet_merge"
      end
      # verify the required parameter 'start_column' is set
      if @api_client.config.client_side_validation && start_column.nil?
        fail ArgumentError, "Missing the required parameter 'start_column' when calling CellsApi.cells_post_worksheet_merge"
      end
      # verify the required parameter 'total_rows' is set
      if @api_client.config.client_side_validation && total_rows.nil?
        fail ArgumentError, "Missing the required parameter 'total_rows' when calling CellsApi.cells_post_worksheet_merge"
      end
      # verify the required parameter 'total_columns' is set
      if @api_client.config.client_side_validation && total_columns.nil?
        fail ArgumentError, "Missing the required parameter 'total_columns' when calling CellsApi.cells_post_worksheet_merge"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/cells/merge".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'startRow'] = start_row
      query_params[:'startColumn'] = start_column
      query_params[:'totalRows'] = total_rows
      query_params[:'totalColumns'] = total_columns
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SaaSposeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsApi#cells_post_worksheet_merge\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unmerge cells.
    # 
    # @param name The workbook name.
    # @param sheet_name The worksheet name.
    # @param start_row The start row.
    # @param start_column The start column.
    # @param total_rows The total rows
    # @param total_columns The total columns.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The workbook folder.
    # @option opts [String] :storage storage name.
    # @return [SaaSposeResponse]
    def cells_post_worksheet_unmerge(name, sheet_name, start_row, start_column, total_rows, total_columns, opts = {})
      data, _status_code, _headers = cells_post_worksheet_unmerge_with_http_info(name, sheet_name, start_row, start_column, total_rows, total_columns, opts)
      return data
    end

    # Unmerge cells.
    # 
    # @param name The workbook name.
    # @param sheet_name The worksheet name.
    # @param start_row The start row.
    # @param start_column The start column.
    # @param total_rows The total rows
    # @param total_columns The total columns.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The workbook folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(SaaSposeResponse, Fixnum, Hash)>] SaaSposeResponse data, response status code and response headers
    def cells_post_worksheet_unmerge_with_http_info(name, sheet_name, start_row, start_column, total_rows, total_columns, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsApi.cells_post_worksheet_unmerge ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsApi.cells_post_worksheet_unmerge"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsApi.cells_post_worksheet_unmerge"
      end
      # verify the required parameter 'start_row' is set
      if @api_client.config.client_side_validation && start_row.nil?
        fail ArgumentError, "Missing the required parameter 'start_row' when calling CellsApi.cells_post_worksheet_unmerge"
      end
      # verify the required parameter 'start_column' is set
      if @api_client.config.client_side_validation && start_column.nil?
        fail ArgumentError, "Missing the required parameter 'start_column' when calling CellsApi.cells_post_worksheet_unmerge"
      end
      # verify the required parameter 'total_rows' is set
      if @api_client.config.client_side_validation && total_rows.nil?
        fail ArgumentError, "Missing the required parameter 'total_rows' when calling CellsApi.cells_post_worksheet_unmerge"
      end
      # verify the required parameter 'total_columns' is set
      if @api_client.config.client_side_validation && total_columns.nil?
        fail ArgumentError, "Missing the required parameter 'total_columns' when calling CellsApi.cells_post_worksheet_unmerge"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/cells/unmerge".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'startRow'] = start_row
      query_params[:'startColumn'] = start_column
      query_params[:'totalRows'] = total_rows
      query_params[:'totalColumns'] = total_columns
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SaaSposeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsApi#cells_post_worksheet_unmerge\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Insert worksheet columns.
    # 
    # @param name The workbook name.
    # @param sheet_name The worksheet name.
    # @param column_index The column index.
    # @param columns The columns.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :update_reference The update reference. (default to true)
    # @option opts [String] :folder The workbook folder.
    # @option opts [String] :storage storage name.
    # @return [ColumnsResponse]
    def cells_put_insert_worksheet_columns(name, sheet_name, column_index, columns, opts = {})
      data, _status_code, _headers = cells_put_insert_worksheet_columns_with_http_info(name, sheet_name, column_index, columns, opts)
      return data
    end

    # Insert worksheet columns.
    # 
    # @param name The workbook name.
    # @param sheet_name The worksheet name.
    # @param column_index The column index.
    # @param columns The columns.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :update_reference The update reference.
    # @option opts [String] :folder The workbook folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(ColumnsResponse, Fixnum, Hash)>] ColumnsResponse data, response status code and response headers
    def cells_put_insert_worksheet_columns_with_http_info(name, sheet_name, column_index, columns, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsApi.cells_put_insert_worksheet_columns ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsApi.cells_put_insert_worksheet_columns"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsApi.cells_put_insert_worksheet_columns"
      end
      # verify the required parameter 'column_index' is set
      if @api_client.config.client_side_validation && column_index.nil?
        fail ArgumentError, "Missing the required parameter 'column_index' when calling CellsApi.cells_put_insert_worksheet_columns"
      end
      # verify the required parameter 'columns' is set
      if @api_client.config.client_side_validation && columns.nil?
        fail ArgumentError, "Missing the required parameter 'columns' when calling CellsApi.cells_put_insert_worksheet_columns"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/cells/columns/{columnIndex}".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s).sub('{' + 'columnIndex' + '}', column_index.to_s)

      # query parameters
      query_params = {}
      query_params[:'columns'] = columns
      query_params[:'updateReference'] = opts[:'update_reference'] if !opts[:'update_reference'].nil?
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ColumnsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsApi#cells_put_insert_worksheet_columns\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Insert new worksheet row.
    # 
    # @param name The workbook name.
    # @param sheet_name The worksheet name.
    # @param row_index The new row index.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The document folder.
    # @option opts [String] :storage storage name.
    # @return [RowResponse]
    def cells_put_insert_worksheet_row(name, sheet_name, row_index, opts = {})
      data, _status_code, _headers = cells_put_insert_worksheet_row_with_http_info(name, sheet_name, row_index, opts)
      return data
    end

    # Insert new worksheet row.
    # 
    # @param name The workbook name.
    # @param sheet_name The worksheet name.
    # @param row_index The new row index.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The document folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(RowResponse, Fixnum, Hash)>] RowResponse data, response status code and response headers
    def cells_put_insert_worksheet_row_with_http_info(name, sheet_name, row_index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsApi.cells_put_insert_worksheet_row ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsApi.cells_put_insert_worksheet_row"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsApi.cells_put_insert_worksheet_row"
      end
      # verify the required parameter 'row_index' is set
      if @api_client.config.client_side_validation && row_index.nil?
        fail ArgumentError, "Missing the required parameter 'row_index' when calling CellsApi.cells_put_insert_worksheet_row"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/cells/rows/{rowIndex}".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s).sub('{' + 'rowIndex' + '}', row_index.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RowResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsApi#cells_put_insert_worksheet_row\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Insert several new worksheet rows.
    # 
    # @param name The workbook name.
    # @param sheet_name The worksheet name.
    # @param startrow The begin row index to be operated.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :total_rows Number of rows to be operated. (default to 1)
    # @option opts [BOOLEAN] :update_reference Indicates if update references in other worksheets. (default to true)
    # @option opts [String] :folder The document folder.
    # @option opts [String] :storage storage name.
    # @return [SaaSposeResponse]
    def cells_put_insert_worksheet_rows(name, sheet_name, startrow, opts = {})
      data, _status_code, _headers = cells_put_insert_worksheet_rows_with_http_info(name, sheet_name, startrow, opts)
      return data
    end

    # Insert several new worksheet rows.
    # 
    # @param name The workbook name.
    # @param sheet_name The worksheet name.
    # @param startrow The begin row index to be operated.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :total_rows Number of rows to be operated.
    # @option opts [BOOLEAN] :update_reference Indicates if update references in other worksheets.
    # @option opts [String] :folder The document folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(SaaSposeResponse, Fixnum, Hash)>] SaaSposeResponse data, response status code and response headers
    def cells_put_insert_worksheet_rows_with_http_info(name, sheet_name, startrow, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsApi.cells_put_insert_worksheet_rows ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsApi.cells_put_insert_worksheet_rows"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsApi.cells_put_insert_worksheet_rows"
      end
      # verify the required parameter 'startrow' is set
      if @api_client.config.client_side_validation && startrow.nil?
        fail ArgumentError, "Missing the required parameter 'startrow' when calling CellsApi.cells_put_insert_worksheet_rows"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/cells/rows".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'startrow'] = startrow
      query_params[:'totalRows'] = opts[:'total_rows'] if !opts[:'total_rows'].nil?
      query_params[:'updateReference'] = opts[:'update_reference'] if !opts[:'update_reference'].nil?
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SaaSposeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsApi#cells_put_insert_worksheet_rows\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
