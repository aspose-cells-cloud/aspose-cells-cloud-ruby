=begin
#Web API Swagger specification

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.0-SNAPSHOT

=end

require "uri"

module AsposeCellsCloud
  class CellsWorkbookApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Decrypt document.
    # 
    # @param name The document name.
    # @param [Hash] opts the optional parameters
    # @option opts [WorkbookEncryptionRequest] :encryption Encryption settings, only password can be specified.
    # @option opts [String] :folder The document folder.
    # @option opts [String] :storage storage name.
    # @return [SaaSposeResponse]
    def cells_workbook_delete_decrypt_document(name, opts = {})
      data, _status_code, _headers = cells_workbook_delete_decrypt_document_with_http_info(name, opts)
      return data
    end

    # Decrypt document.
    # 
    # @param name The document name.
    # @param [Hash] opts the optional parameters
    # @option opts [WorkbookEncryptionRequest] :encryption Encryption settings, only password can be specified.
    # @option opts [String] :folder The document folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(SaaSposeResponse, Fixnum, Hash)>] SaaSposeResponse data, response status code and response headers
    def cells_workbook_delete_decrypt_document_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsWorkbookApi.cells_workbook_delete_decrypt_document ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsWorkbookApi.cells_workbook_delete_decrypt_document"
      end
      # resource path
      local_var_path = "/cells/{name}/encryption".sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'encryption'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SaaSposeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsWorkbookApi#cells_workbook_delete_decrypt_document\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unprotect document from changes.
    # 
    # @param name The document name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder Document&#39;s folder.
    # @option opts [String] :storage storage name.
    # @return [SaaSposeResponse]
    def cells_workbook_delete_document_unprotect_from_changes(name, opts = {})
      data, _status_code, _headers = cells_workbook_delete_document_unprotect_from_changes_with_http_info(name, opts)
      return data
    end

    # Unprotect document from changes.
    # 
    # @param name The document name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder Document&#39;s folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(SaaSposeResponse, Fixnum, Hash)>] SaaSposeResponse data, response status code and response headers
    def cells_workbook_delete_document_unprotect_from_changes_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsWorkbookApi.cells_workbook_delete_document_unprotect_from_changes ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsWorkbookApi.cells_workbook_delete_document_unprotect_from_changes"
      end
      # resource path
      local_var_path = "/cells/{name}/writeProtection".sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SaaSposeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsWorkbookApi#cells_workbook_delete_document_unprotect_from_changes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unprotect document.
    # 
    # @param name The document name.
    # @param [Hash] opts the optional parameters
    # @option opts [WorkbookProtectionRequest] :protection Protection settings, only password can be specified.
    # @option opts [String] :folder The document folder.
    # @option opts [String] :storage storage name.
    # @return [SaaSposeResponse]
    def cells_workbook_delete_unprotect_document(name, opts = {})
      data, _status_code, _headers = cells_workbook_delete_unprotect_document_with_http_info(name, opts)
      return data
    end

    # Unprotect document.
    # 
    # @param name The document name.
    # @param [Hash] opts the optional parameters
    # @option opts [WorkbookProtectionRequest] :protection Protection settings, only password can be specified.
    # @option opts [String] :folder The document folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(SaaSposeResponse, Fixnum, Hash)>] SaaSposeResponse data, response status code and response headers
    def cells_workbook_delete_unprotect_document_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsWorkbookApi.cells_workbook_delete_unprotect_document ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsWorkbookApi.cells_workbook_delete_unprotect_document"
      end
      # resource path
      local_var_path = "/cells/{name}/protection".sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'protection'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SaaSposeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsWorkbookApi#cells_workbook_delete_unprotect_document\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Clean workbook's names.
    # 
    # @param name The workbook name.
    # @param name_name The name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The workbook folder.
    # @option opts [String] :storage storage name.
    # @return [SaaSposeResponse]
    def cells_workbook_delete_workbook_name(name, name_name, opts = {})
      data, _status_code, _headers = cells_workbook_delete_workbook_name_with_http_info(name, name_name, opts)
      return data
    end

    # Clean workbook&#39;s names.
    # 
    # @param name The workbook name.
    # @param name_name The name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The workbook folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(SaaSposeResponse, Fixnum, Hash)>] SaaSposeResponse data, response status code and response headers
    def cells_workbook_delete_workbook_name_with_http_info(name, name_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsWorkbookApi.cells_workbook_delete_workbook_name ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsWorkbookApi.cells_workbook_delete_workbook_name"
      end
      # verify the required parameter 'name_name' is set
      if @api_client.config.client_side_validation && name_name.nil?
        fail ArgumentError, "Missing the required parameter 'name_name' when calling CellsWorkbookApi.cells_workbook_delete_workbook_name"
      end
      # resource path
      local_var_path = "/cells/{name}/names/{nameName}".sub('{' + 'name' + '}', name.to_s).sub('{' + 'nameName' + '}', name_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SaaSposeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsWorkbookApi#cells_workbook_delete_workbook_name\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Clean workbook's names.
    # 
    # @param name The workbook name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The workbook folder.
    # @option opts [String] :storage storage name.
    # @return [SaaSposeResponse]
    def cells_workbook_delete_workbook_names(name, opts = {})
      data, _status_code, _headers = cells_workbook_delete_workbook_names_with_http_info(name, opts)
      return data
    end

    # Clean workbook&#39;s names.
    # 
    # @param name The workbook name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The workbook folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(SaaSposeResponse, Fixnum, Hash)>] SaaSposeResponse data, response status code and response headers
    def cells_workbook_delete_workbook_names_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsWorkbookApi.cells_workbook_delete_workbook_names ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsWorkbookApi.cells_workbook_delete_workbook_names"
      end
      # resource path
      local_var_path = "/cells/{name}/names".sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SaaSposeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsWorkbookApi#cells_workbook_delete_workbook_names\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read workbook info or export.
    # 
    # @param name The document name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :password The document password.
    # @option opts [String] :format The exported file format.
    # @option opts [BOOLEAN] :is_auto_fit Set document rows to be autofit. (default to false)
    # @option opts [BOOLEAN] :only_save_table Only save table data. (default to false)
    # @option opts [String] :folder The document folder.
    # @option opts [String] :storage storage name.
    # @option opts [String] :out_path The document output folder.
    # @return [File]
    def cells_workbook_get_workbook(name, opts = {})
      data, _status_code, _headers = cells_workbook_get_workbook_with_http_info(name, opts)
      return data
    end

    # Read workbook info or export.
    # 
    # @param name The document name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :password The document password.
    # @option opts [String] :format The exported file format.
    # @option opts [BOOLEAN] :is_auto_fit Set document rows to be autofit.
    # @option opts [BOOLEAN] :only_save_table Only save table data.
    # @option opts [String] :folder The document folder.
    # @option opts [String] :storage storage name.
    # @option opts [String] :out_path The document output folder.
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def cells_workbook_get_workbook_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsWorkbookApi.cells_workbook_get_workbook ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsWorkbookApi.cells_workbook_get_workbook"
      end
      # resource path
      local_var_path = "/cells/{name}".sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}
      query_params[:'password'] = opts[:'password'] if !opts[:'password'].nil?
      query_params[:'format'] = opts[:'format'] if !opts[:'format'].nil?
      query_params[:'isAutoFit'] = opts[:'is_auto_fit'] if !opts[:'is_auto_fit'].nil?
      query_params[:'onlySaveTable'] = opts[:'only_save_table'] if !opts[:'only_save_table'].nil?
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?
      query_params[:'outPath'] = opts[:'out_path'] if !opts[:'out_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsWorkbookApi#cells_workbook_get_workbook\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read workbook default style info.
    # 
    # @param name The workbook name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The document&#39;s folder.
    # @option opts [String] :storage storage name.
    # @return [StyleResponse]
    def cells_workbook_get_workbook_default_style(name, opts = {})
      data, _status_code, _headers = cells_workbook_get_workbook_default_style_with_http_info(name, opts)
      return data
    end

    # Read workbook default style info.
    # 
    # @param name The workbook name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The document&#39;s folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(StyleResponse, Fixnum, Hash)>] StyleResponse data, response status code and response headers
    def cells_workbook_get_workbook_default_style_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsWorkbookApi.cells_workbook_get_workbook_default_style ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsWorkbookApi.cells_workbook_get_workbook_default_style"
      end
      # resource path
      local_var_path = "/cells/{name}/defaultstyle".sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StyleResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsWorkbookApi#cells_workbook_get_workbook_default_style\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read workbook's name.
    # 
    # @param name The workbook name.
    # @param name_name The name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The workbook folder.
    # @option opts [String] :storage storage name.
    # @return [NameResponse]
    def cells_workbook_get_workbook_name(name, name_name, opts = {})
      data, _status_code, _headers = cells_workbook_get_workbook_name_with_http_info(name, name_name, opts)
      return data
    end

    # Read workbook&#39;s name.
    # 
    # @param name The workbook name.
    # @param name_name The name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The workbook folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(NameResponse, Fixnum, Hash)>] NameResponse data, response status code and response headers
    def cells_workbook_get_workbook_name_with_http_info(name, name_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsWorkbookApi.cells_workbook_get_workbook_name ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsWorkbookApi.cells_workbook_get_workbook_name"
      end
      # verify the required parameter 'name_name' is set
      if @api_client.config.client_side_validation && name_name.nil?
        fail ArgumentError, "Missing the required parameter 'name_name' when calling CellsWorkbookApi.cells_workbook_get_workbook_name"
      end
      # resource path
      local_var_path = "/cells/{name}/names/{nameName}".sub('{' + 'name' + '}', name.to_s).sub('{' + 'nameName' + '}', name_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NameResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsWorkbookApi#cells_workbook_get_workbook_name\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get workbook's name value.
    # 
    # @param name The workbook name.
    # @param name_name The name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The workbook folder.
    # @option opts [String] :storage storage name.
    # @return [RangeValueResponse]
    def cells_workbook_get_workbook_name_value(name, name_name, opts = {})
      data, _status_code, _headers = cells_workbook_get_workbook_name_value_with_http_info(name, name_name, opts)
      return data
    end

    # Get workbook&#39;s name value.
    # 
    # @param name The workbook name.
    # @param name_name The name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The workbook folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(RangeValueResponse, Fixnum, Hash)>] RangeValueResponse data, response status code and response headers
    def cells_workbook_get_workbook_name_value_with_http_info(name, name_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsWorkbookApi.cells_workbook_get_workbook_name_value ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsWorkbookApi.cells_workbook_get_workbook_name_value"
      end
      # verify the required parameter 'name_name' is set
      if @api_client.config.client_side_validation && name_name.nil?
        fail ArgumentError, "Missing the required parameter 'name_name' when calling CellsWorkbookApi.cells_workbook_get_workbook_name_value"
      end
      # resource path
      local_var_path = "/cells/{name}/names/{nameName}/value".sub('{' + 'name' + '}', name.to_s).sub('{' + 'nameName' + '}', name_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RangeValueResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsWorkbookApi#cells_workbook_get_workbook_name_value\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read workbook's names.
    # 
    # @param name The workbook name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The workbook folder.
    # @option opts [String] :storage storage name.
    # @return [NamesResponse]
    def cells_workbook_get_workbook_names(name, opts = {})
      data, _status_code, _headers = cells_workbook_get_workbook_names_with_http_info(name, opts)
      return data
    end

    # Read workbook&#39;s names.
    # 
    # @param name The workbook name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The workbook folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(NamesResponse, Fixnum, Hash)>] NamesResponse data, response status code and response headers
    def cells_workbook_get_workbook_names_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsWorkbookApi.cells_workbook_get_workbook_names ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsWorkbookApi.cells_workbook_get_workbook_names"
      end
      # resource path
      local_var_path = "/cells/{name}/names".sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NamesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsWorkbookApi#cells_workbook_get_workbook_names\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Workbook Settings DTO
    # 
    # @param name Document name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder Document&#39;s folder.
    # @option opts [String] :storage storage name.
    # @return [WorkbookSettingsResponse]
    def cells_workbook_get_workbook_settings(name, opts = {})
      data, _status_code, _headers = cells_workbook_get_workbook_settings_with_http_info(name, opts)
      return data
    end

    # Get Workbook Settings DTO
    # 
    # @param name Document name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder Document&#39;s folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(WorkbookSettingsResponse, Fixnum, Hash)>] WorkbookSettingsResponse data, response status code and response headers
    def cells_workbook_get_workbook_settings_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsWorkbookApi.cells_workbook_get_workbook_settings ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsWorkbookApi.cells_workbook_get_workbook_settings"
      end
      # resource path
      local_var_path = "/cells/{name}/settings".sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WorkbookSettingsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsWorkbookApi#cells_workbook_get_workbook_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read workbook's text items.
    # 
    # @param name The workbook name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The workbook folder.
    # @option opts [String] :storage storage name.
    # @return [TextItemsResponse]
    def cells_workbook_get_workbook_text_items(name, opts = {})
      data, _status_code, _headers = cells_workbook_get_workbook_text_items_with_http_info(name, opts)
      return data
    end

    # Read workbook&#39;s text items.
    # 
    # @param name The workbook name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The workbook folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(TextItemsResponse, Fixnum, Hash)>] TextItemsResponse data, response status code and response headers
    def cells_workbook_get_workbook_text_items_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsWorkbookApi.cells_workbook_get_workbook_text_items ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsWorkbookApi.cells_workbook_get_workbook_text_items"
      end
      # resource path
      local_var_path = "/cells/{name}/textItems".sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TextItemsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsWorkbookApi#cells_workbook_get_workbook_text_items\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Autofit workbook rows.
    # 
    # @param name Document name.
    # @param [Hash] opts the optional parameters
    # @option opts [AutoFitterOptions] :auto_fitter_options Auto Fitter Options.
    # @option opts [Integer] :start_row Start row.
    # @option opts [Integer] :end_row End row.
    # @option opts [BOOLEAN] :only_auto Only auto. (default to false)
    # @option opts [String] :folder Document&#39;s folder.
    # @option opts [String] :storage storage name.
    # @return [SaaSposeResponse]
    def cells_workbook_post_autofit_workbook_rows(name, opts = {})
      data, _status_code, _headers = cells_workbook_post_autofit_workbook_rows_with_http_info(name, opts)
      return data
    end

    # Autofit workbook rows.
    # 
    # @param name Document name.
    # @param [Hash] opts the optional parameters
    # @option opts [AutoFitterOptions] :auto_fitter_options Auto Fitter Options.
    # @option opts [Integer] :start_row Start row.
    # @option opts [Integer] :end_row End row.
    # @option opts [BOOLEAN] :only_auto Only auto.
    # @option opts [String] :folder Document&#39;s folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(SaaSposeResponse, Fixnum, Hash)>] SaaSposeResponse data, response status code and response headers
    def cells_workbook_post_autofit_workbook_rows_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsWorkbookApi.cells_workbook_post_autofit_workbook_rows ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsWorkbookApi.cells_workbook_post_autofit_workbook_rows"
      end
      # resource path
      local_var_path = "/cells/{name}/autofitrows".sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}
      query_params[:'startRow'] = opts[:'start_row'] if !opts[:'start_row'].nil?
      query_params[:'endRow'] = opts[:'end_row'] if !opts[:'end_row'].nil?
      query_params[:'onlyAuto'] = opts[:'only_auto'] if !opts[:'only_auto'].nil?
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'auto_fitter_options'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SaaSposeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsWorkbookApi#cells_workbook_post_autofit_workbook_rows\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Encript document.
    # 
    # @param name The document name.
    # @param [Hash] opts the optional parameters
    # @option opts [WorkbookEncryptionRequest] :encryption Encryption parameters.
    # @option opts [String] :folder The document folder.
    # @option opts [String] :storage storage name.
    # @return [SaaSposeResponse]
    def cells_workbook_post_encrypt_document(name, opts = {})
      data, _status_code, _headers = cells_workbook_post_encrypt_document_with_http_info(name, opts)
      return data
    end

    # Encript document.
    # 
    # @param name The document name.
    # @param [Hash] opts the optional parameters
    # @option opts [WorkbookEncryptionRequest] :encryption Encryption parameters.
    # @option opts [String] :folder The document folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(SaaSposeResponse, Fixnum, Hash)>] SaaSposeResponse data, response status code and response headers
    def cells_workbook_post_encrypt_document_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsWorkbookApi.cells_workbook_post_encrypt_document ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsWorkbookApi.cells_workbook_post_encrypt_document"
      end
      # resource path
      local_var_path = "/cells/{name}/encryption".sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'encryption'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SaaSposeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsWorkbookApi#cells_workbook_post_encrypt_document\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param name 
    # @param importdata 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder 
    # @option opts [String] :storage storage name.
    # @return [SaaSposeResponse]
    def cells_workbook_post_import_data(name, importdata, opts = {})
      data, _status_code, _headers = cells_workbook_post_import_data_with_http_info(name, importdata, opts)
      return data
    end

    # 
    # 
    # @param name 
    # @param importdata 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder 
    # @option opts [String] :storage storage name.
    # @return [Array<(SaaSposeResponse, Fixnum, Hash)>] SaaSposeResponse data, response status code and response headers
    def cells_workbook_post_import_data_with_http_info(name, importdata, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsWorkbookApi.cells_workbook_post_import_data ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsWorkbookApi.cells_workbook_post_import_data"
      end
      # verify the required parameter 'importdata' is set
      if @api_client.config.client_side_validation && importdata.nil?
        fail ArgumentError, "Missing the required parameter 'importdata' when calling CellsWorkbookApi.cells_workbook_post_import_data"
      end
      # resource path
      local_var_path = "/cells/{name}/importdata".sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(importdata)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SaaSposeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsWorkbookApi#cells_workbook_post_import_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Protect document.
    # 
    # @param name The document name.
    # @param [Hash] opts the optional parameters
    # @option opts [WorkbookProtectionRequest] :protection The protection settings.
    # @option opts [String] :folder The document folder.
    # @option opts [String] :storage storage name.
    # @return [SaaSposeResponse]
    def cells_workbook_post_protect_document(name, opts = {})
      data, _status_code, _headers = cells_workbook_post_protect_document_with_http_info(name, opts)
      return data
    end

    # Protect document.
    # 
    # @param name The document name.
    # @param [Hash] opts the optional parameters
    # @option opts [WorkbookProtectionRequest] :protection The protection settings.
    # @option opts [String] :folder The document folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(SaaSposeResponse, Fixnum, Hash)>] SaaSposeResponse data, response status code and response headers
    def cells_workbook_post_protect_document_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsWorkbookApi.cells_workbook_post_protect_document ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsWorkbookApi.cells_workbook_post_protect_document"
      end
      # resource path
      local_var_path = "/cells/{name}/protection".sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'protection'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SaaSposeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsWorkbookApi#cells_workbook_post_protect_document\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Calculate all formulas in workbook.
    # 
    # @param name Document name.
    # @param [Hash] opts the optional parameters
    # @option opts [CalculationOptions] :options Calculation Options.
    # @option opts [BOOLEAN] :ignore_error ignore Error.
    # @option opts [String] :folder Document&#39;s folder.
    # @option opts [String] :storage storage name.
    # @return [SaaSposeResponse]
    def cells_workbook_post_workbook_calculate_formula(name, opts = {})
      data, _status_code, _headers = cells_workbook_post_workbook_calculate_formula_with_http_info(name, opts)
      return data
    end

    # Calculate all formulas in workbook.
    # 
    # @param name Document name.
    # @param [Hash] opts the optional parameters
    # @option opts [CalculationOptions] :options Calculation Options.
    # @option opts [BOOLEAN] :ignore_error ignore Error.
    # @option opts [String] :folder Document&#39;s folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(SaaSposeResponse, Fixnum, Hash)>] SaaSposeResponse data, response status code and response headers
    def cells_workbook_post_workbook_calculate_formula_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsWorkbookApi.cells_workbook_post_workbook_calculate_formula ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsWorkbookApi.cells_workbook_post_workbook_calculate_formula"
      end
      # resource path
      local_var_path = "/cells/{name}/calculateformula".sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}
      query_params[:'ignoreError'] = opts[:'ignore_error'] if !opts[:'ignore_error'].nil?
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'options'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SaaSposeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsWorkbookApi#cells_workbook_post_workbook_calculate_formula\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Smart marker processing result.
    # 
    # @param name The workbook name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :xml_file The xml file full path, if empty the data is read from request body.
    # @option opts [String] :folder The workbook folder full path.
    # @option opts [String] :storage storage name.
    # @option opts [String] :out_path Path to save result
    # @return [File]
    def cells_workbook_post_workbook_get_smart_marker_result(name, opts = {})
      data, _status_code, _headers = cells_workbook_post_workbook_get_smart_marker_result_with_http_info(name, opts)
      return data
    end

    # Smart marker processing result.
    # 
    # @param name The workbook name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :xml_file The xml file full path, if empty the data is read from request body.
    # @option opts [String] :folder The workbook folder full path.
    # @option opts [String] :storage storage name.
    # @option opts [String] :out_path Path to save result
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def cells_workbook_post_workbook_get_smart_marker_result_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsWorkbookApi.cells_workbook_post_workbook_get_smart_marker_result ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsWorkbookApi.cells_workbook_post_workbook_get_smart_marker_result"
      end
      # resource path
      local_var_path = "/cells/{name}/smartmarker".sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}
      query_params[:'xmlFile'] = opts[:'xml_file'] if !opts[:'xml_file'].nil?
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?
      query_params[:'outPath'] = opts[:'out_path'] if !opts[:'out_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsWorkbookApi#cells_workbook_post_workbook_get_smart_marker_result\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Workbook setting 
    # 
    # @param name Document name.
    # @param [Hash] opts the optional parameters
    # @option opts [WorkbookSettings] :settings Workbook Setting DTO
    # @option opts [String] :folder Document&#39;s folder.
    # @option opts [String] :storage storage name.
    # @return [SaaSposeResponse]
    def cells_workbook_post_workbook_settings(name, opts = {})
      data, _status_code, _headers = cells_workbook_post_workbook_settings_with_http_info(name, opts)
      return data
    end

    # Update Workbook setting 
    # 
    # @param name Document name.
    # @param [Hash] opts the optional parameters
    # @option opts [WorkbookSettings] :settings Workbook Setting DTO
    # @option opts [String] :folder Document&#39;s folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(SaaSposeResponse, Fixnum, Hash)>] SaaSposeResponse data, response status code and response headers
    def cells_workbook_post_workbook_settings_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsWorkbookApi.cells_workbook_post_workbook_settings ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsWorkbookApi.cells_workbook_post_workbook_settings"
      end
      # resource path
      local_var_path = "/cells/{name}/settings".sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'settings'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SaaSposeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsWorkbookApi#cells_workbook_post_workbook_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Split workbook.
    # 
    # @param name The workbook name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :format Split format.
    # @option opts [Integer] :from Start worksheet index. (default to 0)
    # @option opts [Integer] :to End worksheet index. (default to 0)
    # @option opts [Integer] :horizontal_resolution Image horizontal resolution. (default to 0)
    # @option opts [Integer] :vertical_resolution Image vertical resolution. (default to 0)
    # @option opts [String] :folder The workbook folder.
    # @option opts [String] :storage storage name.
    # @return [SplitResultResponse]
    def cells_workbook_post_workbook_split(name, opts = {})
      data, _status_code, _headers = cells_workbook_post_workbook_split_with_http_info(name, opts)
      return data
    end

    # Split workbook.
    # 
    # @param name The workbook name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :format Split format.
    # @option opts [Integer] :from Start worksheet index.
    # @option opts [Integer] :to End worksheet index.
    # @option opts [Integer] :horizontal_resolution Image horizontal resolution.
    # @option opts [Integer] :vertical_resolution Image vertical resolution.
    # @option opts [String] :folder The workbook folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(SplitResultResponse, Fixnum, Hash)>] SplitResultResponse data, response status code and response headers
    def cells_workbook_post_workbook_split_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsWorkbookApi.cells_workbook_post_workbook_split ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsWorkbookApi.cells_workbook_post_workbook_split"
      end
      # resource path
      local_var_path = "/cells/{name}/split".sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}
      query_params[:'format'] = opts[:'format'] if !opts[:'format'].nil?
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'to'] = opts[:'to'] if !opts[:'to'].nil?
      query_params[:'horizontalResolution'] = opts[:'horizontal_resolution'] if !opts[:'horizontal_resolution'].nil?
      query_params[:'verticalResolution'] = opts[:'vertical_resolution'] if !opts[:'vertical_resolution'].nil?
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SplitResultResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsWorkbookApi#cells_workbook_post_workbook_split\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Merge workbooks.
    # 
    # @param name Workbook name.
    # @param merge_with The workbook to merge with.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder Source workbook folder.
    # @option opts [String] :storage storage name.
    # @return [WorkbookResponse]
    def cells_workbook_post_workbooks_merge(name, merge_with, opts = {})
      data, _status_code, _headers = cells_workbook_post_workbooks_merge_with_http_info(name, merge_with, opts)
      return data
    end

    # Merge workbooks.
    # 
    # @param name Workbook name.
    # @param merge_with The workbook to merge with.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder Source workbook folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(WorkbookResponse, Fixnum, Hash)>] WorkbookResponse data, response status code and response headers
    def cells_workbook_post_workbooks_merge_with_http_info(name, merge_with, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsWorkbookApi.cells_workbook_post_workbooks_merge ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsWorkbookApi.cells_workbook_post_workbooks_merge"
      end
      # verify the required parameter 'merge_with' is set
      if @api_client.config.client_side_validation && merge_with.nil?
        fail ArgumentError, "Missing the required parameter 'merge_with' when calling CellsWorkbookApi.cells_workbook_post_workbooks_merge"
      end
      # resource path
      local_var_path = "/cells/{name}/merge".sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}
      query_params[:'mergeWith'] = merge_with
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WorkbookResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsWorkbookApi#cells_workbook_post_workbooks_merge\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Replace text.
    # 
    # @param name Document name.
    # @param old_value The old value.
    # @param new_value The new value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder Document&#39;s folder.
    # @option opts [String] :storage storage name.
    # @return [WorkbookReplaceResponse]
    def cells_workbook_post_workbooks_text_replace(name, old_value, new_value, opts = {})
      data, _status_code, _headers = cells_workbook_post_workbooks_text_replace_with_http_info(name, old_value, new_value, opts)
      return data
    end

    # Replace text.
    # 
    # @param name Document name.
    # @param old_value The old value.
    # @param new_value The new value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder Document&#39;s folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(WorkbookReplaceResponse, Fixnum, Hash)>] WorkbookReplaceResponse data, response status code and response headers
    def cells_workbook_post_workbooks_text_replace_with_http_info(name, old_value, new_value, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsWorkbookApi.cells_workbook_post_workbooks_text_replace ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsWorkbookApi.cells_workbook_post_workbooks_text_replace"
      end
      # verify the required parameter 'old_value' is set
      if @api_client.config.client_side_validation && old_value.nil?
        fail ArgumentError, "Missing the required parameter 'old_value' when calling CellsWorkbookApi.cells_workbook_post_workbooks_text_replace"
      end
      # verify the required parameter 'new_value' is set
      if @api_client.config.client_side_validation && new_value.nil?
        fail ArgumentError, "Missing the required parameter 'new_value' when calling CellsWorkbookApi.cells_workbook_post_workbooks_text_replace"
      end
      # resource path
      local_var_path = "/cells/{name}/replaceText".sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}
      query_params[:'oldValue'] = old_value
      query_params[:'newValue'] = new_value
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WorkbookReplaceResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsWorkbookApi#cells_workbook_post_workbooks_text_replace\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search text.
    # 
    # @param name Document name.
    # @param text Text sample.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder Document&#39;s folder.
    # @option opts [String] :storage storage name.
    # @return [TextItemsResponse]
    def cells_workbook_post_workbooks_text_search(name, text, opts = {})
      data, _status_code, _headers = cells_workbook_post_workbooks_text_search_with_http_info(name, text, opts)
      return data
    end

    # Search text.
    # 
    # @param name Document name.
    # @param text Text sample.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder Document&#39;s folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(TextItemsResponse, Fixnum, Hash)>] TextItemsResponse data, response status code and response headers
    def cells_workbook_post_workbooks_text_search_with_http_info(name, text, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsWorkbookApi.cells_workbook_post_workbooks_text_search ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsWorkbookApi.cells_workbook_post_workbooks_text_search"
      end
      # verify the required parameter 'text' is set
      if @api_client.config.client_side_validation && text.nil?
        fail ArgumentError, "Missing the required parameter 'text' when calling CellsWorkbookApi.cells_workbook_post_workbooks_text_search"
      end
      # resource path
      local_var_path = "/cells/{name}/findText".sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}
      query_params[:'text'] = text
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TextItemsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsWorkbookApi#cells_workbook_post_workbooks_text_search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Convert workbook from request content to some format.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :format The format to convert.
    # @option opts [String] :password The workbook password.
    # @option opts [String] :out_path Path to save result
    # @return [File]
    def cells_workbook_put_convert_workbook(opts = {})
      data, _status_code, _headers = cells_workbook_put_convert_workbook_with_http_info(opts)
      return data
    end

    # Convert workbook from request content to some format.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :format The format to convert.
    # @option opts [String] :password The workbook password.
    # @option opts [String] :out_path Path to save result
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def cells_workbook_put_convert_workbook_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsWorkbookApi.cells_workbook_put_convert_workbook ..."
      end
      # resource path
      local_var_path = "/cells/convert"

      # query parameters
      query_params = {}
      query_params[:'format'] = opts[:'format'] if !opts[:'format'].nil?
      query_params[:'password'] = opts[:'password'] if !opts[:'password'].nil?
      query_params[:'outPath'] = opts[:'out_path'] if !opts[:'out_path'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsWorkbookApi#cells_workbook_put_convert_workbook\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Protect document from changes.
    # 
    # @param name Document name.
    # @param [Hash] opts the optional parameters
    # @option opts [PasswordRequest] :password Modification password.
    # @option opts [String] :folder Document&#39;s folder.
    # @option opts [String] :storage storage name.
    # @return [SaaSposeResponse]
    def cells_workbook_put_document_protect_from_changes(name, opts = {})
      data, _status_code, _headers = cells_workbook_put_document_protect_from_changes_with_http_info(name, opts)
      return data
    end

    # Protect document from changes.
    # 
    # @param name Document name.
    # @param [Hash] opts the optional parameters
    # @option opts [PasswordRequest] :password Modification password.
    # @option opts [String] :folder Document&#39;s folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(SaaSposeResponse, Fixnum, Hash)>] SaaSposeResponse data, response status code and response headers
    def cells_workbook_put_document_protect_from_changes_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsWorkbookApi.cells_workbook_put_document_protect_from_changes ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsWorkbookApi.cells_workbook_put_document_protect_from_changes"
      end
      # resource path
      local_var_path = "/cells/{name}/writeProtection".sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'password'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SaaSposeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsWorkbookApi#cells_workbook_put_document_protect_from_changes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create new workbook using deferent methods.
    # 
    # @param name The new document name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :template_file The template file, if the data not provided default workbook is created.
    # @option opts [String] :data_file Smart marker data file, if the data not provided the request content is checked for the data.
    # @option opts [String] :folder The new document folder.
    # @option opts [String] :storage storage name.
    # @return [WorkbookResponse]
    def cells_workbook_put_workbook_create(name, opts = {})
      data, _status_code, _headers = cells_workbook_put_workbook_create_with_http_info(name, opts)
      return data
    end

    # Create new workbook using deferent methods.
    # 
    # @param name The new document name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :template_file The template file, if the data not provided default workbook is created.
    # @option opts [String] :data_file Smart marker data file, if the data not provided the request content is checked for the data.
    # @option opts [String] :folder The new document folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(WorkbookResponse, Fixnum, Hash)>] WorkbookResponse data, response status code and response headers
    def cells_workbook_put_workbook_create_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsWorkbookApi.cells_workbook_put_workbook_create ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsWorkbookApi.cells_workbook_put_workbook_create"
      end
      # resource path
      local_var_path = "/cells/{name}".sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}
      query_params[:'templateFile'] = opts[:'template_file'] if !opts[:'template_file'].nil?
      query_params[:'dataFile'] = opts[:'data_file'] if !opts[:'data_file'].nil?
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WorkbookResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsWorkbookApi#cells_workbook_put_workbook_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
