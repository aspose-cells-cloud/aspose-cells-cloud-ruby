=begin
#Web API Swagger specification

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.0-SNAPSHOT

=end

require "uri"

module AsposeCellsCloud
  class CellsWorksheetsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Unprotect worksheet.
    # 
    # @param name Document name.
    # @param sheet_name The worksheet name.
    # @param [Hash] opts the optional parameters
    # @option opts [ProtectSheetParameter] :protect_parameter with protection settings. Only password is used here.
    # @option opts [String] :folder Document folder.
    # @option opts [String] :storage storage name.
    # @return [WorksheetResponse]
    def cells_worksheets_delete_unprotect_worksheet(name, sheet_name, opts = {})
      data, _status_code, _headers = cells_worksheets_delete_unprotect_worksheet_with_http_info(name, sheet_name, opts)
      return data
    end

    # Unprotect worksheet.
    # 
    # @param name Document name.
    # @param sheet_name The worksheet name.
    # @param [Hash] opts the optional parameters
    # @option opts [ProtectSheetParameter] :protect_parameter with protection settings. Only password is used here.
    # @option opts [String] :folder Document folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(WorksheetResponse, Fixnum, Hash)>] WorksheetResponse data, response status code and response headers
    def cells_worksheets_delete_unprotect_worksheet_with_http_info(name, sheet_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsWorksheetsApi.cells_worksheets_delete_unprotect_worksheet ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsWorksheetsApi.cells_worksheets_delete_unprotect_worksheet"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsWorksheetsApi.cells_worksheets_delete_unprotect_worksheet"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/protection".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'protect_parameter'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WorksheetResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsWorksheetsApi#cells_worksheets_delete_unprotect_worksheet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete worksheet.
    # 
    # @param name Document name.
    # @param sheet_name The worksheet name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder Document&#39;s folder.
    # @option opts [String] :storage storage name.
    # @return [WorksheetsResponse]
    def cells_worksheets_delete_worksheet(name, sheet_name, opts = {})
      data, _status_code, _headers = cells_worksheets_delete_worksheet_with_http_info(name, sheet_name, opts)
      return data
    end

    # Delete worksheet.
    # 
    # @param name Document name.
    # @param sheet_name The worksheet name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder Document&#39;s folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(WorksheetsResponse, Fixnum, Hash)>] WorksheetsResponse data, response status code and response headers
    def cells_worksheets_delete_worksheet_with_http_info(name, sheet_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsWorksheetsApi.cells_worksheets_delete_worksheet ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsWorksheetsApi.cells_worksheets_delete_worksheet"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsWorksheetsApi.cells_worksheets_delete_worksheet"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WorksheetsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsWorksheetsApi#cells_worksheets_delete_worksheet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set worksheet background image.
    # 
    # @param name 
    # @param sheet_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder 
    # @option opts [String] :storage storage name.
    # @return [SaaSposeResponse]
    def cells_worksheets_delete_worksheet_background(name, sheet_name, opts = {})
      data, _status_code, _headers = cells_worksheets_delete_worksheet_background_with_http_info(name, sheet_name, opts)
      return data
    end

    # Set worksheet background image.
    # 
    # @param name 
    # @param sheet_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder 
    # @option opts [String] :storage storage name.
    # @return [Array<(SaaSposeResponse, Fixnum, Hash)>] SaaSposeResponse data, response status code and response headers
    def cells_worksheets_delete_worksheet_background_with_http_info(name, sheet_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsWorksheetsApi.cells_worksheets_delete_worksheet_background ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsWorksheetsApi.cells_worksheets_delete_worksheet_background"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsWorksheetsApi.cells_worksheets_delete_worksheet_background"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/background".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SaaSposeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsWorksheetsApi#cells_worksheets_delete_worksheet_background\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete worksheet's cell comment.
    # 
    # @param name The document name.
    # @param sheet_name The worksheet name.
    # @param cell_name The cell name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The document folder.
    # @option opts [String] :storage storage name.
    # @return [SaaSposeResponse]
    def cells_worksheets_delete_worksheet_comment(name, sheet_name, cell_name, opts = {})
      data, _status_code, _headers = cells_worksheets_delete_worksheet_comment_with_http_info(name, sheet_name, cell_name, opts)
      return data
    end

    # Delete worksheet&#39;s cell comment.
    # 
    # @param name The document name.
    # @param sheet_name The worksheet name.
    # @param cell_name The cell name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The document folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(SaaSposeResponse, Fixnum, Hash)>] SaaSposeResponse data, response status code and response headers
    def cells_worksheets_delete_worksheet_comment_with_http_info(name, sheet_name, cell_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsWorksheetsApi.cells_worksheets_delete_worksheet_comment ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsWorksheetsApi.cells_worksheets_delete_worksheet_comment"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsWorksheetsApi.cells_worksheets_delete_worksheet_comment"
      end
      # verify the required parameter 'cell_name' is set
      if @api_client.config.client_side_validation && cell_name.nil?
        fail ArgumentError, "Missing the required parameter 'cell_name' when calling CellsWorksheetsApi.cells_worksheets_delete_worksheet_comment"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/comments/{cellName}".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s).sub('{' + 'cellName' + '}', cell_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SaaSposeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsWorksheetsApi#cells_worksheets_delete_worksheet_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete all comments for worksheet.
    # 
    # @param name 
    # @param sheet_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder 
    # @option opts [String] :storage storage name.
    # @return [SaaSposeResponse]
    def cells_worksheets_delete_worksheet_comments(name, sheet_name, opts = {})
      data, _status_code, _headers = cells_worksheets_delete_worksheet_comments_with_http_info(name, sheet_name, opts)
      return data
    end

    # Delete all comments for worksheet.
    # 
    # @param name 
    # @param sheet_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder 
    # @option opts [String] :storage storage name.
    # @return [Array<(SaaSposeResponse, Fixnum, Hash)>] SaaSposeResponse data, response status code and response headers
    def cells_worksheets_delete_worksheet_comments_with_http_info(name, sheet_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsWorksheetsApi.cells_worksheets_delete_worksheet_comments ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsWorksheetsApi.cells_worksheets_delete_worksheet_comments"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsWorksheetsApi.cells_worksheets_delete_worksheet_comments"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/comments".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SaaSposeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsWorksheetsApi#cells_worksheets_delete_worksheet_comments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unfreeze panes
    # 
    # @param name 
    # @param sheet_name 
    # @param row 
    # @param column 
    # @param freezed_rows 
    # @param freezed_columns 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder 
    # @option opts [String] :storage storage name.
    # @return [SaaSposeResponse]
    def cells_worksheets_delete_worksheet_freeze_panes(name, sheet_name, row, column, freezed_rows, freezed_columns, opts = {})
      data, _status_code, _headers = cells_worksheets_delete_worksheet_freeze_panes_with_http_info(name, sheet_name, row, column, freezed_rows, freezed_columns, opts)
      return data
    end

    # Unfreeze panes
    # 
    # @param name 
    # @param sheet_name 
    # @param row 
    # @param column 
    # @param freezed_rows 
    # @param freezed_columns 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder 
    # @option opts [String] :storage storage name.
    # @return [Array<(SaaSposeResponse, Fixnum, Hash)>] SaaSposeResponse data, response status code and response headers
    def cells_worksheets_delete_worksheet_freeze_panes_with_http_info(name, sheet_name, row, column, freezed_rows, freezed_columns, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsWorksheetsApi.cells_worksheets_delete_worksheet_freeze_panes ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsWorksheetsApi.cells_worksheets_delete_worksheet_freeze_panes"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsWorksheetsApi.cells_worksheets_delete_worksheet_freeze_panes"
      end
      # verify the required parameter 'row' is set
      if @api_client.config.client_side_validation && row.nil?
        fail ArgumentError, "Missing the required parameter 'row' when calling CellsWorksheetsApi.cells_worksheets_delete_worksheet_freeze_panes"
      end
      # verify the required parameter 'column' is set
      if @api_client.config.client_side_validation && column.nil?
        fail ArgumentError, "Missing the required parameter 'column' when calling CellsWorksheetsApi.cells_worksheets_delete_worksheet_freeze_panes"
      end
      # verify the required parameter 'freezed_rows' is set
      if @api_client.config.client_side_validation && freezed_rows.nil?
        fail ArgumentError, "Missing the required parameter 'freezed_rows' when calling CellsWorksheetsApi.cells_worksheets_delete_worksheet_freeze_panes"
      end
      # verify the required parameter 'freezed_columns' is set
      if @api_client.config.client_side_validation && freezed_columns.nil?
        fail ArgumentError, "Missing the required parameter 'freezed_columns' when calling CellsWorksheetsApi.cells_worksheets_delete_worksheet_freeze_panes"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/freezepanes".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'row'] = row
      query_params[:'column'] = column
      query_params[:'freezedRows'] = freezed_rows
      query_params[:'freezedColumns'] = freezed_columns
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SaaSposeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsWorksheetsApi#cells_worksheets_delete_worksheet_freeze_panes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read worksheets ranges info.
    # 
    # @param name Document name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder Document folder.
    # @option opts [String] :storage storage name.
    # @return [RangesResponse]
    def cells_worksheets_get_named_ranges(name, opts = {})
      data, _status_code, _headers = cells_worksheets_get_named_ranges_with_http_info(name, opts)
      return data
    end

    # Read worksheets ranges info.
    # 
    # @param name Document name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder Document folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(RangesResponse, Fixnum, Hash)>] RangesResponse data, response status code and response headers
    def cells_worksheets_get_named_ranges_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsWorksheetsApi.cells_worksheets_get_named_ranges ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsWorksheetsApi.cells_worksheets_get_named_ranges"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/ranges".sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RangesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsWorksheetsApi#cells_worksheets_get_named_ranges\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read worksheet info or export.
    # 
    # @param name The document name.
    # @param sheet_name The worksheet name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :format The exported file format.
    # @option opts [Integer] :vertical_resolution Image vertical resolution. (default to 0)
    # @option opts [Integer] :horizontal_resolution Image horizontal resolution. (default to 0)
    # @option opts [String] :folder The document folder.
    # @option opts [String] :storage storage name.
    # @return [String]
    def cells_worksheets_get_worksheet(name, sheet_name, opts = {})
      data, _status_code, _headers = cells_worksheets_get_worksheet_with_http_info(name, sheet_name, opts)
      return data
    end

    # Read worksheet info or export.
    # 
    # @param name The document name.
    # @param sheet_name The worksheet name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :format The exported file format.
    # @option opts [Integer] :vertical_resolution Image vertical resolution.
    # @option opts [Integer] :horizontal_resolution Image horizontal resolution.
    # @option opts [String] :folder The document folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def cells_worksheets_get_worksheet_with_http_info(name, sheet_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsWorksheetsApi.cells_worksheets_get_worksheet ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsWorksheetsApi.cells_worksheets_get_worksheet"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsWorksheetsApi.cells_worksheets_get_worksheet"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'format'] = opts[:'format'] if !opts[:'format'].nil?
      query_params[:'verticalResolution'] = opts[:'vertical_resolution'] if !opts[:'vertical_resolution'].nil?
      query_params[:'horizontalResolution'] = opts[:'horizontal_resolution'] if !opts[:'horizontal_resolution'].nil?
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsWorksheetsApi#cells_worksheets_get_worksheet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Calculate formula value.
    # 
    # @param name Document name.
    # @param sheet_name Worksheet name.
    # @param formula The formula.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder Document&#39;s folder.
    # @option opts [String] :storage storage name.
    # @return [SingleValueResponse]
    def cells_worksheets_get_worksheet_calculate_formula(name, sheet_name, formula, opts = {})
      data, _status_code, _headers = cells_worksheets_get_worksheet_calculate_formula_with_http_info(name, sheet_name, formula, opts)
      return data
    end

    # Calculate formula value.
    # 
    # @param name Document name.
    # @param sheet_name Worksheet name.
    # @param formula The formula.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder Document&#39;s folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(SingleValueResponse, Fixnum, Hash)>] SingleValueResponse data, response status code and response headers
    def cells_worksheets_get_worksheet_calculate_formula_with_http_info(name, sheet_name, formula, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsWorksheetsApi.cells_worksheets_get_worksheet_calculate_formula ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsWorksheetsApi.cells_worksheets_get_worksheet_calculate_formula"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsWorksheetsApi.cells_worksheets_get_worksheet_calculate_formula"
      end
      # verify the required parameter 'formula' is set
      if @api_client.config.client_side_validation && formula.nil?
        fail ArgumentError, "Missing the required parameter 'formula' when calling CellsWorksheetsApi.cells_worksheets_get_worksheet_calculate_formula"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/formulaResult".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'formula'] = formula
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SingleValueResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsWorksheetsApi#cells_worksheets_get_worksheet_calculate_formula\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get worksheet comment by cell name.
    # 
    # @param name The document name.
    # @param sheet_name The worksheet name.
    # @param cell_name The cell name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The document folder.
    # @option opts [String] :storage storage name.
    # @return [CommentResponse]
    def cells_worksheets_get_worksheet_comment(name, sheet_name, cell_name, opts = {})
      data, _status_code, _headers = cells_worksheets_get_worksheet_comment_with_http_info(name, sheet_name, cell_name, opts)
      return data
    end

    # Get worksheet comment by cell name.
    # 
    # @param name The document name.
    # @param sheet_name The worksheet name.
    # @param cell_name The cell name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The document folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(CommentResponse, Fixnum, Hash)>] CommentResponse data, response status code and response headers
    def cells_worksheets_get_worksheet_comment_with_http_info(name, sheet_name, cell_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsWorksheetsApi.cells_worksheets_get_worksheet_comment ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsWorksheetsApi.cells_worksheets_get_worksheet_comment"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsWorksheetsApi.cells_worksheets_get_worksheet_comment"
      end
      # verify the required parameter 'cell_name' is set
      if @api_client.config.client_side_validation && cell_name.nil?
        fail ArgumentError, "Missing the required parameter 'cell_name' when calling CellsWorksheetsApi.cells_worksheets_get_worksheet_comment"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/comments/{cellName}".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s).sub('{' + 'cellName' + '}', cell_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CommentResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsWorksheetsApi#cells_worksheets_get_worksheet_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get worksheet comments.
    # 
    # @param name Workbook name.
    # @param sheet_name The worksheet name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The document folder.
    # @option opts [String] :storage storage name.
    # @return [CommentsResponse]
    def cells_worksheets_get_worksheet_comments(name, sheet_name, opts = {})
      data, _status_code, _headers = cells_worksheets_get_worksheet_comments_with_http_info(name, sheet_name, opts)
      return data
    end

    # Get worksheet comments.
    # 
    # @param name Workbook name.
    # @param sheet_name The worksheet name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The document folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(CommentsResponse, Fixnum, Hash)>] CommentsResponse data, response status code and response headers
    def cells_worksheets_get_worksheet_comments_with_http_info(name, sheet_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsWorksheetsApi.cells_worksheets_get_worksheet_comments ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsWorksheetsApi.cells_worksheets_get_worksheet_comments"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsWorksheetsApi.cells_worksheets_get_worksheet_comments"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/comments".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CommentsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsWorksheetsApi#cells_worksheets_get_worksheet_comments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get worksheet merged cell by its index.
    # 
    # @param name Document name.
    # @param sheet_name Worksheet name.
    # @param merged_cell_index Merged cell index.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder Document folder.
    # @option opts [String] :storage storage name.
    # @return [MergedCellResponse]
    def cells_worksheets_get_worksheet_merged_cell(name, sheet_name, merged_cell_index, opts = {})
      data, _status_code, _headers = cells_worksheets_get_worksheet_merged_cell_with_http_info(name, sheet_name, merged_cell_index, opts)
      return data
    end

    # Get worksheet merged cell by its index.
    # 
    # @param name Document name.
    # @param sheet_name Worksheet name.
    # @param merged_cell_index Merged cell index.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder Document folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(MergedCellResponse, Fixnum, Hash)>] MergedCellResponse data, response status code and response headers
    def cells_worksheets_get_worksheet_merged_cell_with_http_info(name, sheet_name, merged_cell_index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsWorksheetsApi.cells_worksheets_get_worksheet_merged_cell ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsWorksheetsApi.cells_worksheets_get_worksheet_merged_cell"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsWorksheetsApi.cells_worksheets_get_worksheet_merged_cell"
      end
      # verify the required parameter 'merged_cell_index' is set
      if @api_client.config.client_side_validation && merged_cell_index.nil?
        fail ArgumentError, "Missing the required parameter 'merged_cell_index' when calling CellsWorksheetsApi.cells_worksheets_get_worksheet_merged_cell"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/mergedCells/{mergedCellIndex}".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s).sub('{' + 'mergedCellIndex' + '}', merged_cell_index.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MergedCellResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsWorksheetsApi#cells_worksheets_get_worksheet_merged_cell\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get worksheet merged cells.
    # 
    # @param name Document name.
    # @param sheet_name The workseet name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder Document folder.
    # @option opts [String] :storage storage name.
    # @return [MergedCellsResponse]
    def cells_worksheets_get_worksheet_merged_cells(name, sheet_name, opts = {})
      data, _status_code, _headers = cells_worksheets_get_worksheet_merged_cells_with_http_info(name, sheet_name, opts)
      return data
    end

    # Get worksheet merged cells.
    # 
    # @param name Document name.
    # @param sheet_name The workseet name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder Document folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(MergedCellsResponse, Fixnum, Hash)>] MergedCellsResponse data, response status code and response headers
    def cells_worksheets_get_worksheet_merged_cells_with_http_info(name, sheet_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsWorksheetsApi.cells_worksheets_get_worksheet_merged_cells ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsWorksheetsApi.cells_worksheets_get_worksheet_merged_cells"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsWorksheetsApi.cells_worksheets_get_worksheet_merged_cells"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/mergedCells".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MergedCellsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsWorksheetsApi#cells_worksheets_get_worksheet_merged_cells\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get worksheet text items.
    # 
    # @param name Workbook name.
    # @param sheet_name The worksheet name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The workbook&#39;s folder.
    # @option opts [String] :storage storage name.
    # @return [TextItemsResponse]
    def cells_worksheets_get_worksheet_text_items(name, sheet_name, opts = {})
      data, _status_code, _headers = cells_worksheets_get_worksheet_text_items_with_http_info(name, sheet_name, opts)
      return data
    end

    # Get worksheet text items.
    # 
    # @param name Workbook name.
    # @param sheet_name The worksheet name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The workbook&#39;s folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(TextItemsResponse, Fixnum, Hash)>] TextItemsResponse data, response status code and response headers
    def cells_worksheets_get_worksheet_text_items_with_http_info(name, sheet_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsWorksheetsApi.cells_worksheets_get_worksheet_text_items ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsWorksheetsApi.cells_worksheets_get_worksheet_text_items"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsWorksheetsApi.cells_worksheets_get_worksheet_text_items"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/textItems".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TextItemsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsWorksheetsApi#cells_worksheets_get_worksheet_text_items\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read worksheets info.
    # 
    # @param name Document name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder Document folder.
    # @option opts [String] :storage storage name.
    # @return [WorksheetsResponse]
    def cells_worksheets_get_worksheets(name, opts = {})
      data, _status_code, _headers = cells_worksheets_get_worksheets_with_http_info(name, opts)
      return data
    end

    # Read worksheets info.
    # 
    # @param name Document name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder Document folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(WorksheetsResponse, Fixnum, Hash)>] WorksheetsResponse data, response status code and response headers
    def cells_worksheets_get_worksheets_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsWorksheetsApi.cells_worksheets_get_worksheets ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsWorksheetsApi.cells_worksheets_get_worksheets"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets".sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WorksheetsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsWorksheetsApi#cells_worksheets_get_worksheets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param name 
    # @param sheet_name 
    # @param first_column 
    # @param last_column 
    # @param [Hash] opts the optional parameters
    # @option opts [AutoFitterOptions] :auto_fitter_options 
    # @option opts [Integer] :first_row 
    # @option opts [Integer] :last_row 
    # @option opts [String] :folder 
    # @option opts [String] :storage storage name.
    # @return [SaaSposeResponse]
    def cells_worksheets_post_autofit_worksheet_columns(name, sheet_name, first_column, last_column, opts = {})
      data, _status_code, _headers = cells_worksheets_post_autofit_worksheet_columns_with_http_info(name, sheet_name, first_column, last_column, opts)
      return data
    end

    # 
    # 
    # @param name 
    # @param sheet_name 
    # @param first_column 
    # @param last_column 
    # @param [Hash] opts the optional parameters
    # @option opts [AutoFitterOptions] :auto_fitter_options 
    # @option opts [Integer] :first_row 
    # @option opts [Integer] :last_row 
    # @option opts [String] :folder 
    # @option opts [String] :storage storage name.
    # @return [Array<(SaaSposeResponse, Fixnum, Hash)>] SaaSposeResponse data, response status code and response headers
    def cells_worksheets_post_autofit_worksheet_columns_with_http_info(name, sheet_name, first_column, last_column, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsWorksheetsApi.cells_worksheets_post_autofit_worksheet_columns ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsWorksheetsApi.cells_worksheets_post_autofit_worksheet_columns"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsWorksheetsApi.cells_worksheets_post_autofit_worksheet_columns"
      end
      # verify the required parameter 'first_column' is set
      if @api_client.config.client_side_validation && first_column.nil?
        fail ArgumentError, "Missing the required parameter 'first_column' when calling CellsWorksheetsApi.cells_worksheets_post_autofit_worksheet_columns"
      end
      # verify the required parameter 'last_column' is set
      if @api_client.config.client_side_validation && last_column.nil?
        fail ArgumentError, "Missing the required parameter 'last_column' when calling CellsWorksheetsApi.cells_worksheets_post_autofit_worksheet_columns"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/autofitcolumns".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'firstColumn'] = first_column
      query_params[:'lastColumn'] = last_column
      query_params[:'firstRow'] = opts[:'first_row'] if !opts[:'first_row'].nil?
      query_params[:'lastRow'] = opts[:'last_row'] if !opts[:'last_row'].nil?
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'auto_fitter_options'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SaaSposeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsWorksheetsApi#cells_worksheets_post_autofit_worksheet_columns\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param name 
    # @param sheet_name 
    # @param row_index 
    # @param first_column 
    # @param last_column 
    # @param [Hash] opts the optional parameters
    # @option opts [AutoFitterOptions] :auto_fitter_options 
    # @option opts [String] :folder 
    # @option opts [String] :storage storage name.
    # @return [SaaSposeResponse]
    def cells_worksheets_post_autofit_worksheet_row(name, sheet_name, row_index, first_column, last_column, opts = {})
      data, _status_code, _headers = cells_worksheets_post_autofit_worksheet_row_with_http_info(name, sheet_name, row_index, first_column, last_column, opts)
      return data
    end

    # 
    # 
    # @param name 
    # @param sheet_name 
    # @param row_index 
    # @param first_column 
    # @param last_column 
    # @param [Hash] opts the optional parameters
    # @option opts [AutoFitterOptions] :auto_fitter_options 
    # @option opts [String] :folder 
    # @option opts [String] :storage storage name.
    # @return [Array<(SaaSposeResponse, Fixnum, Hash)>] SaaSposeResponse data, response status code and response headers
    def cells_worksheets_post_autofit_worksheet_row_with_http_info(name, sheet_name, row_index, first_column, last_column, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsWorksheetsApi.cells_worksheets_post_autofit_worksheet_row ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsWorksheetsApi.cells_worksheets_post_autofit_worksheet_row"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsWorksheetsApi.cells_worksheets_post_autofit_worksheet_row"
      end
      # verify the required parameter 'row_index' is set
      if @api_client.config.client_side_validation && row_index.nil?
        fail ArgumentError, "Missing the required parameter 'row_index' when calling CellsWorksheetsApi.cells_worksheets_post_autofit_worksheet_row"
      end
      # verify the required parameter 'first_column' is set
      if @api_client.config.client_side_validation && first_column.nil?
        fail ArgumentError, "Missing the required parameter 'first_column' when calling CellsWorksheetsApi.cells_worksheets_post_autofit_worksheet_row"
      end
      # verify the required parameter 'last_column' is set
      if @api_client.config.client_side_validation && last_column.nil?
        fail ArgumentError, "Missing the required parameter 'last_column' when calling CellsWorksheetsApi.cells_worksheets_post_autofit_worksheet_row"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/autofitrow".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'rowIndex'] = row_index
      query_params[:'firstColumn'] = first_column
      query_params[:'lastColumn'] = last_column
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'auto_fitter_options'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SaaSposeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsWorksheetsApi#cells_worksheets_post_autofit_worksheet_row\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Autofit worksheet rows.
    # 
    # @param name Document name.
    # @param sheet_name The worksheet name.
    # @param [Hash] opts the optional parameters
    # @option opts [AutoFitterOptions] :auto_fitter_options Auto Fitter Options.
    # @option opts [Integer] :start_row Start row.
    # @option opts [Integer] :end_row End row.
    # @option opts [BOOLEAN] :only_auto Only auto. (default to false)
    # @option opts [String] :folder Document&#39;s folder.
    # @option opts [String] :storage storage name.
    # @return [SaaSposeResponse]
    def cells_worksheets_post_autofit_worksheet_rows(name, sheet_name, opts = {})
      data, _status_code, _headers = cells_worksheets_post_autofit_worksheet_rows_with_http_info(name, sheet_name, opts)
      return data
    end

    # Autofit worksheet rows.
    # 
    # @param name Document name.
    # @param sheet_name The worksheet name.
    # @param [Hash] opts the optional parameters
    # @option opts [AutoFitterOptions] :auto_fitter_options Auto Fitter Options.
    # @option opts [Integer] :start_row Start row.
    # @option opts [Integer] :end_row End row.
    # @option opts [BOOLEAN] :only_auto Only auto.
    # @option opts [String] :folder Document&#39;s folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(SaaSposeResponse, Fixnum, Hash)>] SaaSposeResponse data, response status code and response headers
    def cells_worksheets_post_autofit_worksheet_rows_with_http_info(name, sheet_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsWorksheetsApi.cells_worksheets_post_autofit_worksheet_rows ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsWorksheetsApi.cells_worksheets_post_autofit_worksheet_rows"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsWorksheetsApi.cells_worksheets_post_autofit_worksheet_rows"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/autofitrows".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'startRow'] = opts[:'start_row'] if !opts[:'start_row'].nil?
      query_params[:'endRow'] = opts[:'end_row'] if !opts[:'end_row'].nil?
      query_params[:'onlyAuto'] = opts[:'only_auto'] if !opts[:'only_auto'].nil?
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'auto_fitter_options'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SaaSposeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsWorksheetsApi#cells_worksheets_post_autofit_worksheet_rows\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param name 
    # @param sheet_name 
    # @param source_sheet 
    # @param [Hash] opts the optional parameters
    # @option opts [CopyOptions] :options 
    # @option opts [String] :source_workbook 
    # @option opts [String] :source_folder 
    # @option opts [String] :folder 
    # @option opts [String] :storage storage name.
    # @return [SaaSposeResponse]
    def cells_worksheets_post_copy_worksheet(name, sheet_name, source_sheet, opts = {})
      data, _status_code, _headers = cells_worksheets_post_copy_worksheet_with_http_info(name, sheet_name, source_sheet, opts)
      return data
    end

    # 
    # 
    # @param name 
    # @param sheet_name 
    # @param source_sheet 
    # @param [Hash] opts the optional parameters
    # @option opts [CopyOptions] :options 
    # @option opts [String] :source_workbook 
    # @option opts [String] :source_folder 
    # @option opts [String] :folder 
    # @option opts [String] :storage storage name.
    # @return [Array<(SaaSposeResponse, Fixnum, Hash)>] SaaSposeResponse data, response status code and response headers
    def cells_worksheets_post_copy_worksheet_with_http_info(name, sheet_name, source_sheet, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsWorksheetsApi.cells_worksheets_post_copy_worksheet ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsWorksheetsApi.cells_worksheets_post_copy_worksheet"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsWorksheetsApi.cells_worksheets_post_copy_worksheet"
      end
      # verify the required parameter 'source_sheet' is set
      if @api_client.config.client_side_validation && source_sheet.nil?
        fail ArgumentError, "Missing the required parameter 'source_sheet' when calling CellsWorksheetsApi.cells_worksheets_post_copy_worksheet"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/copy".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'sourceSheet'] = source_sheet
      query_params[:'sourceWorkbook'] = opts[:'source_workbook'] if !opts[:'source_workbook'].nil?
      query_params[:'sourceFolder'] = opts[:'source_folder'] if !opts[:'source_folder'].nil?
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'options'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SaaSposeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsWorksheetsApi#cells_worksheets_post_copy_worksheet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Move worksheet.
    # 
    # @param name Document name.
    # @param sheet_name The worksheet name.
    # @param [Hash] opts the optional parameters
    # @option opts [WorksheetMovingRequest] :moving with moving parameters.
    # @option opts [String] :folder The document folder.
    # @option opts [String] :storage storage name.
    # @return [WorksheetsResponse]
    def cells_worksheets_post_move_worksheet(name, sheet_name, opts = {})
      data, _status_code, _headers = cells_worksheets_post_move_worksheet_with_http_info(name, sheet_name, opts)
      return data
    end

    # Move worksheet.
    # 
    # @param name Document name.
    # @param sheet_name The worksheet name.
    # @param [Hash] opts the optional parameters
    # @option opts [WorksheetMovingRequest] :moving with moving parameters.
    # @option opts [String] :folder The document folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(WorksheetsResponse, Fixnum, Hash)>] WorksheetsResponse data, response status code and response headers
    def cells_worksheets_post_move_worksheet_with_http_info(name, sheet_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsWorksheetsApi.cells_worksheets_post_move_worksheet ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsWorksheetsApi.cells_worksheets_post_move_worksheet"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsWorksheetsApi.cells_worksheets_post_move_worksheet"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/position".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'moving'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WorksheetsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsWorksheetsApi#cells_worksheets_post_move_worksheet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Rename worksheet
    # 
    # @param name 
    # @param sheet_name 
    # @param newname 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder 
    # @option opts [String] :storage storage name.
    # @return [SaaSposeResponse]
    def cells_worksheets_post_rename_worksheet(name, sheet_name, newname, opts = {})
      data, _status_code, _headers = cells_worksheets_post_rename_worksheet_with_http_info(name, sheet_name, newname, opts)
      return data
    end

    # Rename worksheet
    # 
    # @param name 
    # @param sheet_name 
    # @param newname 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder 
    # @option opts [String] :storage storage name.
    # @return [Array<(SaaSposeResponse, Fixnum, Hash)>] SaaSposeResponse data, response status code and response headers
    def cells_worksheets_post_rename_worksheet_with_http_info(name, sheet_name, newname, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsWorksheetsApi.cells_worksheets_post_rename_worksheet ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsWorksheetsApi.cells_worksheets_post_rename_worksheet"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsWorksheetsApi.cells_worksheets_post_rename_worksheet"
      end
      # verify the required parameter 'newname' is set
      if @api_client.config.client_side_validation && newname.nil?
        fail ArgumentError, "Missing the required parameter 'newname' when calling CellsWorksheetsApi.cells_worksheets_post_rename_worksheet"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/rename".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'newname'] = newname
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SaaSposeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsWorksheetsApi#cells_worksheets_post_rename_worksheet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update worksheet property
    # 
    # @param name 
    # @param sheet_name 
    # @param [Hash] opts the optional parameters
    # @option opts [Worksheet] :sheet 
    # @option opts [String] :folder 
    # @option opts [String] :storage storage name.
    # @return [WorksheetResponse]
    def cells_worksheets_post_update_worksheet_property(name, sheet_name, opts = {})
      data, _status_code, _headers = cells_worksheets_post_update_worksheet_property_with_http_info(name, sheet_name, opts)
      return data
    end

    # Update worksheet property
    # 
    # @param name 
    # @param sheet_name 
    # @param [Hash] opts the optional parameters
    # @option opts [Worksheet] :sheet 
    # @option opts [String] :folder 
    # @option opts [String] :storage storage name.
    # @return [Array<(WorksheetResponse, Fixnum, Hash)>] WorksheetResponse data, response status code and response headers
    def cells_worksheets_post_update_worksheet_property_with_http_info(name, sheet_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsWorksheetsApi.cells_worksheets_post_update_worksheet_property ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsWorksheetsApi.cells_worksheets_post_update_worksheet_property"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsWorksheetsApi.cells_worksheets_post_update_worksheet_property"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'sheet'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WorksheetResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsWorksheetsApi#cells_worksheets_post_update_worksheet_property\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param name 
    # @param sheet_name 
    # @param value 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder 
    # @option opts [String] :storage storage name.
    # @return [SaaSposeResponse]
    def cells_worksheets_post_update_worksheet_zoom(name, sheet_name, value, opts = {})
      data, _status_code, _headers = cells_worksheets_post_update_worksheet_zoom_with_http_info(name, sheet_name, value, opts)
      return data
    end

    # 
    # 
    # @param name 
    # @param sheet_name 
    # @param value 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder 
    # @option opts [String] :storage storage name.
    # @return [Array<(SaaSposeResponse, Fixnum, Hash)>] SaaSposeResponse data, response status code and response headers
    def cells_worksheets_post_update_worksheet_zoom_with_http_info(name, sheet_name, value, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsWorksheetsApi.cells_worksheets_post_update_worksheet_zoom ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsWorksheetsApi.cells_worksheets_post_update_worksheet_zoom"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsWorksheetsApi.cells_worksheets_post_update_worksheet_zoom"
      end
      # verify the required parameter 'value' is set
      if @api_client.config.client_side_validation && value.nil?
        fail ArgumentError, "Missing the required parameter 'value' when calling CellsWorksheetsApi.cells_worksheets_post_update_worksheet_zoom"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/zoom".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'value'] = value
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SaaSposeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsWorksheetsApi#cells_worksheets_post_update_worksheet_zoom\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update worksheet's cell comment.
    # 
    # @param name The document name.
    # @param sheet_name The worksheet name.
    # @param cell_name The cell name
    # @param [Hash] opts the optional parameters
    # @option opts [Comment] :comment Comment object
    # @option opts [String] :folder The document folder.
    # @option opts [String] :storage storage name.
    # @return [SaaSposeResponse]
    def cells_worksheets_post_worksheet_comment(name, sheet_name, cell_name, opts = {})
      data, _status_code, _headers = cells_worksheets_post_worksheet_comment_with_http_info(name, sheet_name, cell_name, opts)
      return data
    end

    # Update worksheet&#39;s cell comment.
    # 
    # @param name The document name.
    # @param sheet_name The worksheet name.
    # @param cell_name The cell name
    # @param [Hash] opts the optional parameters
    # @option opts [Comment] :comment Comment object
    # @option opts [String] :folder The document folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(SaaSposeResponse, Fixnum, Hash)>] SaaSposeResponse data, response status code and response headers
    def cells_worksheets_post_worksheet_comment_with_http_info(name, sheet_name, cell_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsWorksheetsApi.cells_worksheets_post_worksheet_comment ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsWorksheetsApi.cells_worksheets_post_worksheet_comment"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsWorksheetsApi.cells_worksheets_post_worksheet_comment"
      end
      # verify the required parameter 'cell_name' is set
      if @api_client.config.client_side_validation && cell_name.nil?
        fail ArgumentError, "Missing the required parameter 'cell_name' when calling CellsWorksheetsApi.cells_worksheets_post_worksheet_comment"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/comments/{cellName}".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s).sub('{' + 'cellName' + '}', cell_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'comment'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SaaSposeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsWorksheetsApi#cells_worksheets_post_worksheet_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Sort worksheet range.
    # 
    # @param name The workbook name.
    # @param sheet_name The worksheet name.
    # @param cell_area The range to sort.
    # @param [Hash] opts the optional parameters
    # @option opts [DataSorter] :data_sorter with sorting settings.
    # @option opts [String] :folder The workbook folder.
    # @option opts [String] :storage storage name.
    # @return [SaaSposeResponse]
    def cells_worksheets_post_worksheet_range_sort(name, sheet_name, cell_area, opts = {})
      data, _status_code, _headers = cells_worksheets_post_worksheet_range_sort_with_http_info(name, sheet_name, cell_area, opts)
      return data
    end

    # Sort worksheet range.
    # 
    # @param name The workbook name.
    # @param sheet_name The worksheet name.
    # @param cell_area The range to sort.
    # @param [Hash] opts the optional parameters
    # @option opts [DataSorter] :data_sorter with sorting settings.
    # @option opts [String] :folder The workbook folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(SaaSposeResponse, Fixnum, Hash)>] SaaSposeResponse data, response status code and response headers
    def cells_worksheets_post_worksheet_range_sort_with_http_info(name, sheet_name, cell_area, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsWorksheetsApi.cells_worksheets_post_worksheet_range_sort ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsWorksheetsApi.cells_worksheets_post_worksheet_range_sort"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsWorksheetsApi.cells_worksheets_post_worksheet_range_sort"
      end
      # verify the required parameter 'cell_area' is set
      if @api_client.config.client_side_validation && cell_area.nil?
        fail ArgumentError, "Missing the required parameter 'cell_area' when calling CellsWorksheetsApi.cells_worksheets_post_worksheet_range_sort"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/sort".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'cellArea'] = cell_area
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data_sorter'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SaaSposeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsWorksheetsApi#cells_worksheets_post_worksheet_range_sort\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search text.
    # 
    # @param name Document name.
    # @param sheet_name The worksheet name.
    # @param text Text to search.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder Document&#39;s folder.
    # @option opts [String] :storage storage name.
    # @return [TextItemsResponse]
    def cells_worksheets_post_worksheet_text_search(name, sheet_name, text, opts = {})
      data, _status_code, _headers = cells_worksheets_post_worksheet_text_search_with_http_info(name, sheet_name, text, opts)
      return data
    end

    # Search text.
    # 
    # @param name Document name.
    # @param sheet_name The worksheet name.
    # @param text Text to search.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder Document&#39;s folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(TextItemsResponse, Fixnum, Hash)>] TextItemsResponse data, response status code and response headers
    def cells_worksheets_post_worksheet_text_search_with_http_info(name, sheet_name, text, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsWorksheetsApi.cells_worksheets_post_worksheet_text_search ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsWorksheetsApi.cells_worksheets_post_worksheet_text_search"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsWorksheetsApi.cells_worksheets_post_worksheet_text_search"
      end
      # verify the required parameter 'text' is set
      if @api_client.config.client_side_validation && text.nil?
        fail ArgumentError, "Missing the required parameter 'text' when calling CellsWorksheetsApi.cells_worksheets_post_worksheet_text_search"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/findText".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'text'] = text
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TextItemsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsWorksheetsApi#cells_worksheets_post_worksheet_text_search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Replace text.
    # 
    # @param name Document name.
    # @param sheet_name Worksheet name.
    # @param old_value The old text to replace.
    # @param new_value The new text to replace by.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder Document&#39;s folder.
    # @option opts [String] :storage storage name.
    # @return [WorksheetReplaceResponse]
    def cells_worksheets_post_worsheet_text_replace(name, sheet_name, old_value, new_value, opts = {})
      data, _status_code, _headers = cells_worksheets_post_worsheet_text_replace_with_http_info(name, sheet_name, old_value, new_value, opts)
      return data
    end

    # Replace text.
    # 
    # @param name Document name.
    # @param sheet_name Worksheet name.
    # @param old_value The old text to replace.
    # @param new_value The new text to replace by.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder Document&#39;s folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(WorksheetReplaceResponse, Fixnum, Hash)>] WorksheetReplaceResponse data, response status code and response headers
    def cells_worksheets_post_worsheet_text_replace_with_http_info(name, sheet_name, old_value, new_value, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsWorksheetsApi.cells_worksheets_post_worsheet_text_replace ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsWorksheetsApi.cells_worksheets_post_worsheet_text_replace"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsWorksheetsApi.cells_worksheets_post_worsheet_text_replace"
      end
      # verify the required parameter 'old_value' is set
      if @api_client.config.client_side_validation && old_value.nil?
        fail ArgumentError, "Missing the required parameter 'old_value' when calling CellsWorksheetsApi.cells_worksheets_post_worsheet_text_replace"
      end
      # verify the required parameter 'new_value' is set
      if @api_client.config.client_side_validation && new_value.nil?
        fail ArgumentError, "Missing the required parameter 'new_value' when calling CellsWorksheetsApi.cells_worksheets_post_worsheet_text_replace"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/replaceText".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'oldValue'] = old_value
      query_params[:'newValue'] = new_value
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WorksheetReplaceResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsWorksheetsApi#cells_worksheets_post_worsheet_text_replace\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add new worksheet.
    # 
    # @param name Document name.
    # @param sheet_name The new sheet name.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :position The new sheet position.
    # @option opts [String] :sheettype The new sheet type.
    # @option opts [String] :folder Document folder.
    # @option opts [String] :storage storage name.
    # @return [WorksheetsResponse]
    def cells_worksheets_put_add_new_worksheet(name, sheet_name, opts = {})
      data, _status_code, _headers = cells_worksheets_put_add_new_worksheet_with_http_info(name, sheet_name, opts)
      return data
    end

    # Add new worksheet.
    # 
    # @param name Document name.
    # @param sheet_name The new sheet name.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :position The new sheet position.
    # @option opts [String] :sheettype The new sheet type.
    # @option opts [String] :folder Document folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(WorksheetsResponse, Fixnum, Hash)>] WorksheetsResponse data, response status code and response headers
    def cells_worksheets_put_add_new_worksheet_with_http_info(name, sheet_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsWorksheetsApi.cells_worksheets_put_add_new_worksheet ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsWorksheetsApi.cells_worksheets_put_add_new_worksheet"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsWorksheetsApi.cells_worksheets_put_add_new_worksheet"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'position'] = opts[:'position'] if !opts[:'position'].nil?
      query_params[:'sheettype'] = opts[:'sheettype'] if !opts[:'sheettype'].nil?
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WorksheetsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsWorksheetsApi#cells_worksheets_put_add_new_worksheet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Change worksheet visibility.
    # 
    # @param name Document name.
    # @param sheet_name Worksheet name.
    # @param is_visible New worksheet visibility value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The document folder.
    # @option opts [String] :storage storage name.
    # @return [WorksheetResponse]
    def cells_worksheets_put_change_visibility_worksheet(name, sheet_name, is_visible, opts = {})
      data, _status_code, _headers = cells_worksheets_put_change_visibility_worksheet_with_http_info(name, sheet_name, is_visible, opts)
      return data
    end

    # Change worksheet visibility.
    # 
    # @param name Document name.
    # @param sheet_name Worksheet name.
    # @param is_visible New worksheet visibility value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The document folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(WorksheetResponse, Fixnum, Hash)>] WorksheetResponse data, response status code and response headers
    def cells_worksheets_put_change_visibility_worksheet_with_http_info(name, sheet_name, is_visible, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsWorksheetsApi.cells_worksheets_put_change_visibility_worksheet ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsWorksheetsApi.cells_worksheets_put_change_visibility_worksheet"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsWorksheetsApi.cells_worksheets_put_change_visibility_worksheet"
      end
      # verify the required parameter 'is_visible' is set
      if @api_client.config.client_side_validation && is_visible.nil?
        fail ArgumentError, "Missing the required parameter 'is_visible' when calling CellsWorksheetsApi.cells_worksheets_put_change_visibility_worksheet"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/visible".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'isVisible'] = is_visible
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WorksheetResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsWorksheetsApi#cells_worksheets_put_change_visibility_worksheet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Protect worksheet.
    # 
    # @param name Document name.
    # @param sheet_name The worksheet name.
    # @param [Hash] opts the optional parameters
    # @option opts [ProtectSheetParameter] :protect_parameter with protection settings.
    # @option opts [String] :folder Document folder.
    # @option opts [String] :storage storage name.
    # @return [WorksheetResponse]
    def cells_worksheets_put_protect_worksheet(name, sheet_name, opts = {})
      data, _status_code, _headers = cells_worksheets_put_protect_worksheet_with_http_info(name, sheet_name, opts)
      return data
    end

    # Protect worksheet.
    # 
    # @param name Document name.
    # @param sheet_name The worksheet name.
    # @param [Hash] opts the optional parameters
    # @option opts [ProtectSheetParameter] :protect_parameter with protection settings.
    # @option opts [String] :folder Document folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(WorksheetResponse, Fixnum, Hash)>] WorksheetResponse data, response status code and response headers
    def cells_worksheets_put_protect_worksheet_with_http_info(name, sheet_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsWorksheetsApi.cells_worksheets_put_protect_worksheet ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsWorksheetsApi.cells_worksheets_put_protect_worksheet"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsWorksheetsApi.cells_worksheets_put_protect_worksheet"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/protection".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'protect_parameter'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WorksheetResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsWorksheetsApi#cells_worksheets_put_protect_worksheet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set worksheet background image.
    # 
    # @param name 
    # @param sheet_name 
    # @param png 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder 
    # @option opts [String] :storage storage name.
    # @return [SaaSposeResponse]
    def cells_worksheets_put_worksheet_background(name, sheet_name, png, opts = {})
      data, _status_code, _headers = cells_worksheets_put_worksheet_background_with_http_info(name, sheet_name, png, opts)
      return data
    end

    # Set worksheet background image.
    # 
    # @param name 
    # @param sheet_name 
    # @param png 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder 
    # @option opts [String] :storage storage name.
    # @return [Array<(SaaSposeResponse, Fixnum, Hash)>] SaaSposeResponse data, response status code and response headers
    def cells_worksheets_put_worksheet_background_with_http_info(name, sheet_name, png, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsWorksheetsApi.cells_worksheets_put_worksheet_background ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsWorksheetsApi.cells_worksheets_put_worksheet_background"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsWorksheetsApi.cells_worksheets_put_worksheet_background"
      end
      # verify the required parameter 'png' is set
      if @api_client.config.client_side_validation && png.nil?
        fail ArgumentError, "Missing the required parameter 'png' when calling CellsWorksheetsApi.cells_worksheets_put_worksheet_background"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/background".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(png)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SaaSposeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsWorksheetsApi#cells_worksheets_put_worksheet_background\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add worksheet's cell comment.
    # 
    # @param name The document name.
    # @param sheet_name The worksheet name.
    # @param cell_name The cell name
    # @param [Hash] opts the optional parameters
    # @option opts [Comment] :comment Comment object
    # @option opts [String] :folder The document folder.
    # @option opts [String] :storage storage name.
    # @return [CommentResponse]
    def cells_worksheets_put_worksheet_comment(name, sheet_name, cell_name, opts = {})
      data, _status_code, _headers = cells_worksheets_put_worksheet_comment_with_http_info(name, sheet_name, cell_name, opts)
      return data
    end

    # Add worksheet&#39;s cell comment.
    # 
    # @param name The document name.
    # @param sheet_name The worksheet name.
    # @param cell_name The cell name
    # @param [Hash] opts the optional parameters
    # @option opts [Comment] :comment Comment object
    # @option opts [String] :folder The document folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(CommentResponse, Fixnum, Hash)>] CommentResponse data, response status code and response headers
    def cells_worksheets_put_worksheet_comment_with_http_info(name, sheet_name, cell_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsWorksheetsApi.cells_worksheets_put_worksheet_comment ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsWorksheetsApi.cells_worksheets_put_worksheet_comment"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsWorksheetsApi.cells_worksheets_put_worksheet_comment"
      end
      # verify the required parameter 'cell_name' is set
      if @api_client.config.client_side_validation && cell_name.nil?
        fail ArgumentError, "Missing the required parameter 'cell_name' when calling CellsWorksheetsApi.cells_worksheets_put_worksheet_comment"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/comments/{cellName}".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s).sub('{' + 'cellName' + '}', cell_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'comment'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CommentResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsWorksheetsApi#cells_worksheets_put_worksheet_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set freeze panes
    # 
    # @param name 
    # @param sheet_name 
    # @param row 
    # @param column 
    # @param freezed_rows 
    # @param freezed_columns 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder 
    # @option opts [String] :storage storage name.
    # @return [SaaSposeResponse]
    def cells_worksheets_put_worksheet_freeze_panes(name, sheet_name, row, column, freezed_rows, freezed_columns, opts = {})
      data, _status_code, _headers = cells_worksheets_put_worksheet_freeze_panes_with_http_info(name, sheet_name, row, column, freezed_rows, freezed_columns, opts)
      return data
    end

    # Set freeze panes
    # 
    # @param name 
    # @param sheet_name 
    # @param row 
    # @param column 
    # @param freezed_rows 
    # @param freezed_columns 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder 
    # @option opts [String] :storage storage name.
    # @return [Array<(SaaSposeResponse, Fixnum, Hash)>] SaaSposeResponse data, response status code and response headers
    def cells_worksheets_put_worksheet_freeze_panes_with_http_info(name, sheet_name, row, column, freezed_rows, freezed_columns, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsWorksheetsApi.cells_worksheets_put_worksheet_freeze_panes ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsWorksheetsApi.cells_worksheets_put_worksheet_freeze_panes"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsWorksheetsApi.cells_worksheets_put_worksheet_freeze_panes"
      end
      # verify the required parameter 'row' is set
      if @api_client.config.client_side_validation && row.nil?
        fail ArgumentError, "Missing the required parameter 'row' when calling CellsWorksheetsApi.cells_worksheets_put_worksheet_freeze_panes"
      end
      # verify the required parameter 'column' is set
      if @api_client.config.client_side_validation && column.nil?
        fail ArgumentError, "Missing the required parameter 'column' when calling CellsWorksheetsApi.cells_worksheets_put_worksheet_freeze_panes"
      end
      # verify the required parameter 'freezed_rows' is set
      if @api_client.config.client_side_validation && freezed_rows.nil?
        fail ArgumentError, "Missing the required parameter 'freezed_rows' when calling CellsWorksheetsApi.cells_worksheets_put_worksheet_freeze_panes"
      end
      # verify the required parameter 'freezed_columns' is set
      if @api_client.config.client_side_validation && freezed_columns.nil?
        fail ArgumentError, "Missing the required parameter 'freezed_columns' when calling CellsWorksheetsApi.cells_worksheets_put_worksheet_freeze_panes"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/freezepanes".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'row'] = row
      query_params[:'column'] = column
      query_params[:'freezedRows'] = freezed_rows
      query_params[:'freezedColumns'] = freezed_columns
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SaaSposeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsWorksheetsApi#cells_worksheets_put_worksheet_freeze_panes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
