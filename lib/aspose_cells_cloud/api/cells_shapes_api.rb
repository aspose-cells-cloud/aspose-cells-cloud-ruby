=begin
#Web API Swagger specification

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.0-SNAPSHOT

=end

require "uri"

module AsposeCellsCloud
  class CellsShapesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Delete a shape in worksheet
    # 
    # @param name document name.
    # @param sheet_name worksheet name.
    # @param shapeindex shape index in worksheet shapes.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder Document&#39;s folder.
    # @option opts [String] :storage storage name.
    # @return [SaaSposeResponse]
    def cells_shapes_delete_worksheet_shape(name, sheet_name, shapeindex, opts = {})
      data, _status_code, _headers = cells_shapes_delete_worksheet_shape_with_http_info(name, sheet_name, shapeindex, opts)
      return data
    end

    # Delete a shape in worksheet
    # 
    # @param name document name.
    # @param sheet_name worksheet name.
    # @param shapeindex shape index in worksheet shapes.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder Document&#39;s folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(SaaSposeResponse, Fixnum, Hash)>] SaaSposeResponse data, response status code and response headers
    def cells_shapes_delete_worksheet_shape_with_http_info(name, sheet_name, shapeindex, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsShapesApi.cells_shapes_delete_worksheet_shape ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsShapesApi.cells_shapes_delete_worksheet_shape"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsShapesApi.cells_shapes_delete_worksheet_shape"
      end
      # verify the required parameter 'shapeindex' is set
      if @api_client.config.client_side_validation && shapeindex.nil?
        fail ArgumentError, "Missing the required parameter 'shapeindex' when calling CellsShapesApi.cells_shapes_delete_worksheet_shape"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/shapes/{shapeindex}".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s).sub('{' + 'shapeindex' + '}', shapeindex.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SaaSposeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsShapesApi#cells_shapes_delete_worksheet_shape\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # delete all shapes in worksheet
    # 
    # @param name document name.
    # @param sheet_name worksheet name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder Document&#39;s folder.
    # @option opts [String] :storage storage name.
    # @return [SaaSposeResponse]
    def cells_shapes_delete_worksheet_shapes(name, sheet_name, opts = {})
      data, _status_code, _headers = cells_shapes_delete_worksheet_shapes_with_http_info(name, sheet_name, opts)
      return data
    end

    # delete all shapes in worksheet
    # 
    # @param name document name.
    # @param sheet_name worksheet name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder Document&#39;s folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(SaaSposeResponse, Fixnum, Hash)>] SaaSposeResponse data, response status code and response headers
    def cells_shapes_delete_worksheet_shapes_with_http_info(name, sheet_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsShapesApi.cells_shapes_delete_worksheet_shapes ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsShapesApi.cells_shapes_delete_worksheet_shapes"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsShapesApi.cells_shapes_delete_worksheet_shapes"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/shapes".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SaaSposeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsShapesApi#cells_shapes_delete_worksheet_shapes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get worksheet shape
    # 
    # @param name document name.
    # @param sheet_name worksheet name.
    # @param shapeindex shape index in worksheet shapes.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder Document&#39;s folder.
    # @option opts [String] :storage storage name.
    # @return [ShapeResponse]
    def cells_shapes_get_worksheet_shape(name, sheet_name, shapeindex, opts = {})
      data, _status_code, _headers = cells_shapes_get_worksheet_shape_with_http_info(name, sheet_name, shapeindex, opts)
      return data
    end

    # Get worksheet shape
    # 
    # @param name document name.
    # @param sheet_name worksheet name.
    # @param shapeindex shape index in worksheet shapes.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder Document&#39;s folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(ShapeResponse, Fixnum, Hash)>] ShapeResponse data, response status code and response headers
    def cells_shapes_get_worksheet_shape_with_http_info(name, sheet_name, shapeindex, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsShapesApi.cells_shapes_get_worksheet_shape ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsShapesApi.cells_shapes_get_worksheet_shape"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsShapesApi.cells_shapes_get_worksheet_shape"
      end
      # verify the required parameter 'shapeindex' is set
      if @api_client.config.client_side_validation && shapeindex.nil?
        fail ArgumentError, "Missing the required parameter 'shapeindex' when calling CellsShapesApi.cells_shapes_get_worksheet_shape"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/shapes/{shapeindex}".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s).sub('{' + 'shapeindex' + '}', shapeindex.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ShapeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsShapesApi#cells_shapes_get_worksheet_shape\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get worksheet shapes 
    # 
    # @param name document name.
    # @param sheet_name worksheet name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder Document&#39;s folder.
    # @option opts [String] :storage storage name.
    # @return [ShapesResponse]
    def cells_shapes_get_worksheet_shapes(name, sheet_name, opts = {})
      data, _status_code, _headers = cells_shapes_get_worksheet_shapes_with_http_info(name, sheet_name, opts)
      return data
    end

    # Get worksheet shapes 
    # 
    # @param name document name.
    # @param sheet_name worksheet name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder Document&#39;s folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(ShapesResponse, Fixnum, Hash)>] ShapesResponse data, response status code and response headers
    def cells_shapes_get_worksheet_shapes_with_http_info(name, sheet_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsShapesApi.cells_shapes_get_worksheet_shapes ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsShapesApi.cells_shapes_get_worksheet_shapes"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsShapesApi.cells_shapes_get_worksheet_shapes"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/shapes".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ShapesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsShapesApi#cells_shapes_get_worksheet_shapes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a shape in worksheet
    # 
    # @param name document name.
    # @param sheet_name worksheet name.
    # @param shapeindex shape index in worksheet shapes.
    # @param [Hash] opts the optional parameters
    # @option opts [Shape] :dto 
    # @option opts [String] :folder Document&#39;s folder.
    # @option opts [String] :storage storage name.
    # @return [SaaSposeResponse]
    def cells_shapes_post_worksheet_shape(name, sheet_name, shapeindex, opts = {})
      data, _status_code, _headers = cells_shapes_post_worksheet_shape_with_http_info(name, sheet_name, shapeindex, opts)
      return data
    end

    # Update a shape in worksheet
    # 
    # @param name document name.
    # @param sheet_name worksheet name.
    # @param shapeindex shape index in worksheet shapes.
    # @param [Hash] opts the optional parameters
    # @option opts [Shape] :dto 
    # @option opts [String] :folder Document&#39;s folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(SaaSposeResponse, Fixnum, Hash)>] SaaSposeResponse data, response status code and response headers
    def cells_shapes_post_worksheet_shape_with_http_info(name, sheet_name, shapeindex, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsShapesApi.cells_shapes_post_worksheet_shape ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsShapesApi.cells_shapes_post_worksheet_shape"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsShapesApi.cells_shapes_post_worksheet_shape"
      end
      # verify the required parameter 'shapeindex' is set
      if @api_client.config.client_side_validation && shapeindex.nil?
        fail ArgumentError, "Missing the required parameter 'shapeindex' when calling CellsShapesApi.cells_shapes_post_worksheet_shape"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/shapes/{shapeindex}".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s).sub('{' + 'shapeindex' + '}', shapeindex.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'dto'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SaaSposeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsShapesApi#cells_shapes_post_worksheet_shape\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add shape in worksheet
    # 
    # @param name document name.
    # @param sheet_name worksheet name.
    # @param drawing_type shape object type
    # @param upper_left_row Upper left row index.
    # @param upper_left_column Upper left column index.
    # @param top Represents the vertical offset of Spinner from its left row, in unit of pixel.
    # @param left Represents the horizontal offset of Spinner from its left column, in unit of pixel.
    # @param width Represents the height of Spinner, in unit of pixel.
    # @param height Represents the width of Spinner, in unit of pixel.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder Document&#39;s folder.
    # @option opts [String] :storage storage name.
    # @return [ShapeResponse]
    def cells_shapes_put_worksheet_shape(name, sheet_name, drawing_type, upper_left_row, upper_left_column, top, left, width, height, opts = {})
      data, _status_code, _headers = cells_shapes_put_worksheet_shape_with_http_info(name, sheet_name, drawing_type, upper_left_row, upper_left_column, top, left, width, height, opts)
      return data
    end

    # Add shape in worksheet
    # 
    # @param name document name.
    # @param sheet_name worksheet name.
    # @param drawing_type shape object type
    # @param upper_left_row Upper left row index.
    # @param upper_left_column Upper left column index.
    # @param top Represents the vertical offset of Spinner from its left row, in unit of pixel.
    # @param left Represents the horizontal offset of Spinner from its left column, in unit of pixel.
    # @param width Represents the height of Spinner, in unit of pixel.
    # @param height Represents the width of Spinner, in unit of pixel.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder Document&#39;s folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(ShapeResponse, Fixnum, Hash)>] ShapeResponse data, response status code and response headers
    def cells_shapes_put_worksheet_shape_with_http_info(name, sheet_name, drawing_type, upper_left_row, upper_left_column, top, left, width, height, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsShapesApi.cells_shapes_put_worksheet_shape ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsShapesApi.cells_shapes_put_worksheet_shape"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsShapesApi.cells_shapes_put_worksheet_shape"
      end
      # verify the required parameter 'drawing_type' is set
      if @api_client.config.client_side_validation && drawing_type.nil?
        fail ArgumentError, "Missing the required parameter 'drawing_type' when calling CellsShapesApi.cells_shapes_put_worksheet_shape"
      end
      # verify the required parameter 'upper_left_row' is set
      if @api_client.config.client_side_validation && upper_left_row.nil?
        fail ArgumentError, "Missing the required parameter 'upper_left_row' when calling CellsShapesApi.cells_shapes_put_worksheet_shape"
      end
      # verify the required parameter 'upper_left_column' is set
      if @api_client.config.client_side_validation && upper_left_column.nil?
        fail ArgumentError, "Missing the required parameter 'upper_left_column' when calling CellsShapesApi.cells_shapes_put_worksheet_shape"
      end
      # verify the required parameter 'top' is set
      if @api_client.config.client_side_validation && top.nil?
        fail ArgumentError, "Missing the required parameter 'top' when calling CellsShapesApi.cells_shapes_put_worksheet_shape"
      end
      # verify the required parameter 'left' is set
      if @api_client.config.client_side_validation && left.nil?
        fail ArgumentError, "Missing the required parameter 'left' when calling CellsShapesApi.cells_shapes_put_worksheet_shape"
      end
      # verify the required parameter 'width' is set
      if @api_client.config.client_side_validation && width.nil?
        fail ArgumentError, "Missing the required parameter 'width' when calling CellsShapesApi.cells_shapes_put_worksheet_shape"
      end
      # verify the required parameter 'height' is set
      if @api_client.config.client_side_validation && height.nil?
        fail ArgumentError, "Missing the required parameter 'height' when calling CellsShapesApi.cells_shapes_put_worksheet_shape"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/shapes".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'DrawingType'] = drawing_type
      query_params[:'upperLeftRow'] = upper_left_row
      query_params[:'upperLeftColumn'] = upper_left_column
      query_params[:'top'] = top
      query_params[:'left'] = left
      query_params[:'width'] = width
      query_params[:'height'] = height
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ShapeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsShapesApi#cells_shapes_put_worksheet_shape\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
