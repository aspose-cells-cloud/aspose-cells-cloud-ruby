=begin
#Web API Swagger specification

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.0-SNAPSHOT

=end

require "uri"

module AsposeCellsCloud
  class CellsConditionalFormattingsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Remove conditional formatting
    # 
    # @param name 
    # @param sheet_name 
    # @param index 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder 
    # @option opts [String] :storage storage name.
    # @return [SaaSposeResponse]
    def cells_conditional_formattings_delete_worksheet_conditional_formatting(name, sheet_name, index, opts = {})
      data, _status_code, _headers = cells_conditional_formattings_delete_worksheet_conditional_formatting_with_http_info(name, sheet_name, index, opts)
      return data
    end

    # Remove conditional formatting
    # 
    # @param name 
    # @param sheet_name 
    # @param index 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder 
    # @option opts [String] :storage storage name.
    # @return [Array<(SaaSposeResponse, Fixnum, Hash)>] SaaSposeResponse data, response status code and response headers
    def cells_conditional_formattings_delete_worksheet_conditional_formatting_with_http_info(name, sheet_name, index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsConditionalFormattingsApi.cells_conditional_formattings_delete_worksheet_conditional_formatting ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsConditionalFormattingsApi.cells_conditional_formattings_delete_worksheet_conditional_formatting"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsConditionalFormattingsApi.cells_conditional_formattings_delete_worksheet_conditional_formatting"
      end
      # verify the required parameter 'index' is set
      if @api_client.config.client_side_validation && index.nil?
        fail ArgumentError, "Missing the required parameter 'index' when calling CellsConditionalFormattingsApi.cells_conditional_formattings_delete_worksheet_conditional_formatting"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/conditionalFormattings/{index}".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s).sub('{' + 'index' + '}', index.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SaaSposeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsConditionalFormattingsApi#cells_conditional_formattings_delete_worksheet_conditional_formatting\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove cell area from conditional formatting.
    # 
    # @param name 
    # @param sheet_name 
    # @param start_row 
    # @param start_column 
    # @param total_rows 
    # @param total_columns 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder 
    # @option opts [String] :storage storage name.
    # @return [SaaSposeResponse]
    def cells_conditional_formattings_delete_worksheet_conditional_formatting_area(name, sheet_name, start_row, start_column, total_rows, total_columns, opts = {})
      data, _status_code, _headers = cells_conditional_formattings_delete_worksheet_conditional_formatting_area_with_http_info(name, sheet_name, start_row, start_column, total_rows, total_columns, opts)
      return data
    end

    # Remove cell area from conditional formatting.
    # 
    # @param name 
    # @param sheet_name 
    # @param start_row 
    # @param start_column 
    # @param total_rows 
    # @param total_columns 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder 
    # @option opts [String] :storage storage name.
    # @return [Array<(SaaSposeResponse, Fixnum, Hash)>] SaaSposeResponse data, response status code and response headers
    def cells_conditional_formattings_delete_worksheet_conditional_formatting_area_with_http_info(name, sheet_name, start_row, start_column, total_rows, total_columns, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsConditionalFormattingsApi.cells_conditional_formattings_delete_worksheet_conditional_formatting_area ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsConditionalFormattingsApi.cells_conditional_formattings_delete_worksheet_conditional_formatting_area"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsConditionalFormattingsApi.cells_conditional_formattings_delete_worksheet_conditional_formatting_area"
      end
      # verify the required parameter 'start_row' is set
      if @api_client.config.client_side_validation && start_row.nil?
        fail ArgumentError, "Missing the required parameter 'start_row' when calling CellsConditionalFormattingsApi.cells_conditional_formattings_delete_worksheet_conditional_formatting_area"
      end
      # verify the required parameter 'start_column' is set
      if @api_client.config.client_side_validation && start_column.nil?
        fail ArgumentError, "Missing the required parameter 'start_column' when calling CellsConditionalFormattingsApi.cells_conditional_formattings_delete_worksheet_conditional_formatting_area"
      end
      # verify the required parameter 'total_rows' is set
      if @api_client.config.client_side_validation && total_rows.nil?
        fail ArgumentError, "Missing the required parameter 'total_rows' when calling CellsConditionalFormattingsApi.cells_conditional_formattings_delete_worksheet_conditional_formatting_area"
      end
      # verify the required parameter 'total_columns' is set
      if @api_client.config.client_side_validation && total_columns.nil?
        fail ArgumentError, "Missing the required parameter 'total_columns' when calling CellsConditionalFormattingsApi.cells_conditional_formattings_delete_worksheet_conditional_formatting_area"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/conditionalFormattings/area".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'startRow'] = start_row
      query_params[:'startColumn'] = start_column
      query_params[:'totalRows'] = total_rows
      query_params[:'totalColumns'] = total_columns
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SaaSposeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsConditionalFormattingsApi#cells_conditional_formattings_delete_worksheet_conditional_formatting_area\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Clear all condition formattings
    # 
    # @param name 
    # @param sheet_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder 
    # @option opts [String] :storage storage name.
    # @return [SaaSposeResponse]
    def cells_conditional_formattings_delete_worksheet_conditional_formattings(name, sheet_name, opts = {})
      data, _status_code, _headers = cells_conditional_formattings_delete_worksheet_conditional_formattings_with_http_info(name, sheet_name, opts)
      return data
    end

    # Clear all condition formattings
    # 
    # @param name 
    # @param sheet_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder 
    # @option opts [String] :storage storage name.
    # @return [Array<(SaaSposeResponse, Fixnum, Hash)>] SaaSposeResponse data, response status code and response headers
    def cells_conditional_formattings_delete_worksheet_conditional_formattings_with_http_info(name, sheet_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsConditionalFormattingsApi.cells_conditional_formattings_delete_worksheet_conditional_formattings ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsConditionalFormattingsApi.cells_conditional_formattings_delete_worksheet_conditional_formattings"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsConditionalFormattingsApi.cells_conditional_formattings_delete_worksheet_conditional_formattings"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/conditionalFormattings".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SaaSposeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsConditionalFormattingsApi#cells_conditional_formattings_delete_worksheet_conditional_formattings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get conditional formatting
    # 
    # @param name 
    # @param sheet_name 
    # @param index 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder 
    # @option opts [String] :storage storage name.
    # @return [ConditionalFormattingResponse]
    def cells_conditional_formattings_get_worksheet_conditional_formatting(name, sheet_name, index, opts = {})
      data, _status_code, _headers = cells_conditional_formattings_get_worksheet_conditional_formatting_with_http_info(name, sheet_name, index, opts)
      return data
    end

    # Get conditional formatting
    # 
    # @param name 
    # @param sheet_name 
    # @param index 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder 
    # @option opts [String] :storage storage name.
    # @return [Array<(ConditionalFormattingResponse, Fixnum, Hash)>] ConditionalFormattingResponse data, response status code and response headers
    def cells_conditional_formattings_get_worksheet_conditional_formatting_with_http_info(name, sheet_name, index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsConditionalFormattingsApi.cells_conditional_formattings_get_worksheet_conditional_formatting ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsConditionalFormattingsApi.cells_conditional_formattings_get_worksheet_conditional_formatting"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsConditionalFormattingsApi.cells_conditional_formattings_get_worksheet_conditional_formatting"
      end
      # verify the required parameter 'index' is set
      if @api_client.config.client_side_validation && index.nil?
        fail ArgumentError, "Missing the required parameter 'index' when calling CellsConditionalFormattingsApi.cells_conditional_formattings_get_worksheet_conditional_formatting"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/conditionalFormattings/{index}".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s).sub('{' + 'index' + '}', index.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConditionalFormattingResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsConditionalFormattingsApi#cells_conditional_formattings_get_worksheet_conditional_formatting\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get conditional formattings 
    # 
    # @param name 
    # @param sheet_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder 
    # @option opts [String] :storage storage name.
    # @return [ConditionalFormattingsResponse]
    def cells_conditional_formattings_get_worksheet_conditional_formattings(name, sheet_name, opts = {})
      data, _status_code, _headers = cells_conditional_formattings_get_worksheet_conditional_formattings_with_http_info(name, sheet_name, opts)
      return data
    end

    # Get conditional formattings 
    # 
    # @param name 
    # @param sheet_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder 
    # @option opts [String] :storage storage name.
    # @return [Array<(ConditionalFormattingsResponse, Fixnum, Hash)>] ConditionalFormattingsResponse data, response status code and response headers
    def cells_conditional_formattings_get_worksheet_conditional_formattings_with_http_info(name, sheet_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsConditionalFormattingsApi.cells_conditional_formattings_get_worksheet_conditional_formattings ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsConditionalFormattingsApi.cells_conditional_formattings_get_worksheet_conditional_formattings"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsConditionalFormattingsApi.cells_conditional_formattings_get_worksheet_conditional_formattings"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/conditionalFormattings".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConditionalFormattingsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsConditionalFormattingsApi#cells_conditional_formattings_get_worksheet_conditional_formattings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a condition formatting.
    # 
    # @param name 
    # @param sheet_name 
    # @param cell_area 
    # @param [Hash] opts the optional parameters
    # @option opts [FormatCondition] :formatcondition 
    # @option opts [String] :folder 
    # @option opts [String] :storage storage name.
    # @return [SaaSposeResponse]
    def cells_conditional_formattings_put_worksheet_conditional_formatting(name, sheet_name, cell_area, opts = {})
      data, _status_code, _headers = cells_conditional_formattings_put_worksheet_conditional_formatting_with_http_info(name, sheet_name, cell_area, opts)
      return data
    end

    # Add a condition formatting.
    # 
    # @param name 
    # @param sheet_name 
    # @param cell_area 
    # @param [Hash] opts the optional parameters
    # @option opts [FormatCondition] :formatcondition 
    # @option opts [String] :folder 
    # @option opts [String] :storage storage name.
    # @return [Array<(SaaSposeResponse, Fixnum, Hash)>] SaaSposeResponse data, response status code and response headers
    def cells_conditional_formattings_put_worksheet_conditional_formatting_with_http_info(name, sheet_name, cell_area, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsConditionalFormattingsApi.cells_conditional_formattings_put_worksheet_conditional_formatting ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsConditionalFormattingsApi.cells_conditional_formattings_put_worksheet_conditional_formatting"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsConditionalFormattingsApi.cells_conditional_formattings_put_worksheet_conditional_formatting"
      end
      # verify the required parameter 'cell_area' is set
      if @api_client.config.client_side_validation && cell_area.nil?
        fail ArgumentError, "Missing the required parameter 'cell_area' when calling CellsConditionalFormattingsApi.cells_conditional_formattings_put_worksheet_conditional_formatting"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/conditionalFormattings".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'cellArea'] = cell_area
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'formatcondition'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SaaSposeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsConditionalFormattingsApi#cells_conditional_formattings_put_worksheet_conditional_formatting\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a format condition.
    # 
    # @param name 
    # @param sheet_name 
    # @param index 
    # @param cell_area 
    # @param type 
    # @param operator_type 
    # @param formula1 
    # @param formula2 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder 
    # @option opts [String] :storage storage name.
    # @return [SaaSposeResponse]
    def cells_conditional_formattings_put_worksheet_format_condition(name, sheet_name, index, cell_area, type, operator_type, formula1, formula2, opts = {})
      data, _status_code, _headers = cells_conditional_formattings_put_worksheet_format_condition_with_http_info(name, sheet_name, index, cell_area, type, operator_type, formula1, formula2, opts)
      return data
    end

    # Add a format condition.
    # 
    # @param name 
    # @param sheet_name 
    # @param index 
    # @param cell_area 
    # @param type 
    # @param operator_type 
    # @param formula1 
    # @param formula2 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder 
    # @option opts [String] :storage storage name.
    # @return [Array<(SaaSposeResponse, Fixnum, Hash)>] SaaSposeResponse data, response status code and response headers
    def cells_conditional_formattings_put_worksheet_format_condition_with_http_info(name, sheet_name, index, cell_area, type, operator_type, formula1, formula2, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsConditionalFormattingsApi.cells_conditional_formattings_put_worksheet_format_condition ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsConditionalFormattingsApi.cells_conditional_formattings_put_worksheet_format_condition"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsConditionalFormattingsApi.cells_conditional_formattings_put_worksheet_format_condition"
      end
      # verify the required parameter 'index' is set
      if @api_client.config.client_side_validation && index.nil?
        fail ArgumentError, "Missing the required parameter 'index' when calling CellsConditionalFormattingsApi.cells_conditional_formattings_put_worksheet_format_condition"
      end
      # verify the required parameter 'cell_area' is set
      if @api_client.config.client_side_validation && cell_area.nil?
        fail ArgumentError, "Missing the required parameter 'cell_area' when calling CellsConditionalFormattingsApi.cells_conditional_formattings_put_worksheet_format_condition"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling CellsConditionalFormattingsApi.cells_conditional_formattings_put_worksheet_format_condition"
      end
      # verify the required parameter 'operator_type' is set
      if @api_client.config.client_side_validation && operator_type.nil?
        fail ArgumentError, "Missing the required parameter 'operator_type' when calling CellsConditionalFormattingsApi.cells_conditional_formattings_put_worksheet_format_condition"
      end
      # verify the required parameter 'formula1' is set
      if @api_client.config.client_side_validation && formula1.nil?
        fail ArgumentError, "Missing the required parameter 'formula1' when calling CellsConditionalFormattingsApi.cells_conditional_formattings_put_worksheet_format_condition"
      end
      # verify the required parameter 'formula2' is set
      if @api_client.config.client_side_validation && formula2.nil?
        fail ArgumentError, "Missing the required parameter 'formula2' when calling CellsConditionalFormattingsApi.cells_conditional_formattings_put_worksheet_format_condition"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/conditionalFormattings/{index}".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s).sub('{' + 'index' + '}', index.to_s)

      # query parameters
      query_params = {}
      query_params[:'cellArea'] = cell_area
      query_params[:'type'] = type
      query_params[:'operatorType'] = operator_type
      query_params[:'formula1'] = formula1
      query_params[:'formula2'] = formula2
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SaaSposeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsConditionalFormattingsApi#cells_conditional_formattings_put_worksheet_format_condition\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # add a cell area for format condition             
    # 
    # @param name 
    # @param sheet_name 
    # @param index 
    # @param cell_area 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder 
    # @option opts [String] :storage storage name.
    # @return [SaaSposeResponse]
    def cells_conditional_formattings_put_worksheet_format_condition_area(name, sheet_name, index, cell_area, opts = {})
      data, _status_code, _headers = cells_conditional_formattings_put_worksheet_format_condition_area_with_http_info(name, sheet_name, index, cell_area, opts)
      return data
    end

    # add a cell area for format condition             
    # 
    # @param name 
    # @param sheet_name 
    # @param index 
    # @param cell_area 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder 
    # @option opts [String] :storage storage name.
    # @return [Array<(SaaSposeResponse, Fixnum, Hash)>] SaaSposeResponse data, response status code and response headers
    def cells_conditional_formattings_put_worksheet_format_condition_area_with_http_info(name, sheet_name, index, cell_area, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsConditionalFormattingsApi.cells_conditional_formattings_put_worksheet_format_condition_area ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsConditionalFormattingsApi.cells_conditional_formattings_put_worksheet_format_condition_area"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsConditionalFormattingsApi.cells_conditional_formattings_put_worksheet_format_condition_area"
      end
      # verify the required parameter 'index' is set
      if @api_client.config.client_side_validation && index.nil?
        fail ArgumentError, "Missing the required parameter 'index' when calling CellsConditionalFormattingsApi.cells_conditional_formattings_put_worksheet_format_condition_area"
      end
      # verify the required parameter 'cell_area' is set
      if @api_client.config.client_side_validation && cell_area.nil?
        fail ArgumentError, "Missing the required parameter 'cell_area' when calling CellsConditionalFormattingsApi.cells_conditional_formattings_put_worksheet_format_condition_area"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/conditionalFormattings/{index}/area".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s).sub('{' + 'index' + '}', index.to_s)

      # query parameters
      query_params = {}
      query_params[:'cellArea'] = cell_area
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SaaSposeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsConditionalFormattingsApi#cells_conditional_formattings_put_worksheet_format_condition_area\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a condition for format condition.
    # 
    # @param name 
    # @param sheet_name 
    # @param index 
    # @param type 
    # @param operator_type 
    # @param formula1 
    # @param formula2 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder 
    # @option opts [String] :storage storage name.
    # @return [SaaSposeResponse]
    def cells_conditional_formattings_put_worksheet_format_condition_condition(name, sheet_name, index, type, operator_type, formula1, formula2, opts = {})
      data, _status_code, _headers = cells_conditional_formattings_put_worksheet_format_condition_condition_with_http_info(name, sheet_name, index, type, operator_type, formula1, formula2, opts)
      return data
    end

    # Add a condition for format condition.
    # 
    # @param name 
    # @param sheet_name 
    # @param index 
    # @param type 
    # @param operator_type 
    # @param formula1 
    # @param formula2 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder 
    # @option opts [String] :storage storage name.
    # @return [Array<(SaaSposeResponse, Fixnum, Hash)>] SaaSposeResponse data, response status code and response headers
    def cells_conditional_formattings_put_worksheet_format_condition_condition_with_http_info(name, sheet_name, index, type, operator_type, formula1, formula2, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsConditionalFormattingsApi.cells_conditional_formattings_put_worksheet_format_condition_condition ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsConditionalFormattingsApi.cells_conditional_formattings_put_worksheet_format_condition_condition"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsConditionalFormattingsApi.cells_conditional_formattings_put_worksheet_format_condition_condition"
      end
      # verify the required parameter 'index' is set
      if @api_client.config.client_side_validation && index.nil?
        fail ArgumentError, "Missing the required parameter 'index' when calling CellsConditionalFormattingsApi.cells_conditional_formattings_put_worksheet_format_condition_condition"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling CellsConditionalFormattingsApi.cells_conditional_formattings_put_worksheet_format_condition_condition"
      end
      # verify the required parameter 'operator_type' is set
      if @api_client.config.client_side_validation && operator_type.nil?
        fail ArgumentError, "Missing the required parameter 'operator_type' when calling CellsConditionalFormattingsApi.cells_conditional_formattings_put_worksheet_format_condition_condition"
      end
      # verify the required parameter 'formula1' is set
      if @api_client.config.client_side_validation && formula1.nil?
        fail ArgumentError, "Missing the required parameter 'formula1' when calling CellsConditionalFormattingsApi.cells_conditional_formattings_put_worksheet_format_condition_condition"
      end
      # verify the required parameter 'formula2' is set
      if @api_client.config.client_side_validation && formula2.nil?
        fail ArgumentError, "Missing the required parameter 'formula2' when calling CellsConditionalFormattingsApi.cells_conditional_formattings_put_worksheet_format_condition_condition"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/conditionalFormattings/{index}/condition".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s).sub('{' + 'index' + '}', index.to_s)

      # query parameters
      query_params = {}
      query_params[:'type'] = type
      query_params[:'operatorType'] = operator_type
      query_params[:'formula1'] = formula1
      query_params[:'formula2'] = formula2
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SaaSposeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsConditionalFormattingsApi#cells_conditional_formattings_put_worksheet_format_condition_condition\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
