=begin
#Web API Swagger specification

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.0-SNAPSHOT

=end

require "uri"

module AsposeCellsCloud
  class CellsPicturesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Delete a picture object in worksheet
    # 
    # @param name The workbook name.
    # @param sheet_name The worsheet name.
    # @param picture_index Picture index
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The workbook folder.
    # @option opts [String] :storage storage name.
    # @return [SaaSposeResponse]
    def cells_pictures_delete_worksheet_picture(name, sheet_name, picture_index, opts = {})
      data, _status_code, _headers = cells_pictures_delete_worksheet_picture_with_http_info(name, sheet_name, picture_index, opts)
      return data
    end

    # Delete a picture object in worksheet
    # 
    # @param name The workbook name.
    # @param sheet_name The worsheet name.
    # @param picture_index Picture index
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The workbook folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(SaaSposeResponse, Fixnum, Hash)>] SaaSposeResponse data, response status code and response headers
    def cells_pictures_delete_worksheet_picture_with_http_info(name, sheet_name, picture_index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsPicturesApi.cells_pictures_delete_worksheet_picture ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsPicturesApi.cells_pictures_delete_worksheet_picture"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsPicturesApi.cells_pictures_delete_worksheet_picture"
      end
      # verify the required parameter 'picture_index' is set
      if @api_client.config.client_side_validation && picture_index.nil?
        fail ArgumentError, "Missing the required parameter 'picture_index' when calling CellsPicturesApi.cells_pictures_delete_worksheet_picture"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/pictures/{pictureIndex}".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s).sub('{' + 'pictureIndex' + '}', picture_index.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SaaSposeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsPicturesApi#cells_pictures_delete_worksheet_picture\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete all pictures in worksheet.
    # 
    # @param name Document name.
    # @param sheet_name Worksheet name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The document folder.
    # @option opts [String] :storage storage name.
    # @return [SaaSposeResponse]
    def cells_pictures_delete_worksheet_pictures(name, sheet_name, opts = {})
      data, _status_code, _headers = cells_pictures_delete_worksheet_pictures_with_http_info(name, sheet_name, opts)
      return data
    end

    # Delete all pictures in worksheet.
    # 
    # @param name Document name.
    # @param sheet_name Worksheet name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The document folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(SaaSposeResponse, Fixnum, Hash)>] SaaSposeResponse data, response status code and response headers
    def cells_pictures_delete_worksheet_pictures_with_http_info(name, sheet_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsPicturesApi.cells_pictures_delete_worksheet_pictures ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsPicturesApi.cells_pictures_delete_worksheet_pictures"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsPicturesApi.cells_pictures_delete_worksheet_pictures"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/pictures".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SaaSposeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsPicturesApi#cells_pictures_delete_worksheet_pictures\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GRead worksheet picture by number.
    # 
    # @param name Document name.
    # @param sheet_name Worksheet name.
    # @param picture_index The picture index.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :format The exported object format.
    # @option opts [String] :folder The document folder.
    # @option opts [String] :storage storage name.
    # @return [File]
    def cells_pictures_get_worksheet_picture(name, sheet_name, picture_index, opts = {})
      data, _status_code, _headers = cells_pictures_get_worksheet_picture_with_http_info(name, sheet_name, picture_index, opts)
      return data
    end

    # GRead worksheet picture by number.
    # 
    # @param name Document name.
    # @param sheet_name Worksheet name.
    # @param picture_index The picture index.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :format The exported object format.
    # @option opts [String] :folder The document folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def cells_pictures_get_worksheet_picture_with_http_info(name, sheet_name, picture_index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsPicturesApi.cells_pictures_get_worksheet_picture ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsPicturesApi.cells_pictures_get_worksheet_picture"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsPicturesApi.cells_pictures_get_worksheet_picture"
      end
      # verify the required parameter 'picture_index' is set
      if @api_client.config.client_side_validation && picture_index.nil?
        fail ArgumentError, "Missing the required parameter 'picture_index' when calling CellsPicturesApi.cells_pictures_get_worksheet_picture"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/pictures/{pictureIndex}".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s).sub('{' + 'pictureIndex' + '}', picture_index.to_s)

      # query parameters
      query_params = {}
      query_params[:'format'] = opts[:'format'] if !opts[:'format'].nil?
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsPicturesApi#cells_pictures_get_worksheet_picture\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read worksheet pictures.
    # 
    # @param name Document name.
    # @param sheet_name The worksheet name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder Document&#39;s folder.
    # @option opts [String] :storage storage name.
    # @return [PicturesResponse]
    def cells_pictures_get_worksheet_pictures(name, sheet_name, opts = {})
      data, _status_code, _headers = cells_pictures_get_worksheet_pictures_with_http_info(name, sheet_name, opts)
      return data
    end

    # Read worksheet pictures.
    # 
    # @param name Document name.
    # @param sheet_name The worksheet name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder Document&#39;s folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(PicturesResponse, Fixnum, Hash)>] PicturesResponse data, response status code and response headers
    def cells_pictures_get_worksheet_pictures_with_http_info(name, sheet_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsPicturesApi.cells_pictures_get_worksheet_pictures ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsPicturesApi.cells_pictures_get_worksheet_pictures"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsPicturesApi.cells_pictures_get_worksheet_pictures"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/pictures".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PicturesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsPicturesApi#cells_pictures_get_worksheet_pictures\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update worksheet picture by index.
    # 
    # @param name Document name.
    # @param sheet_name Worksheet name.
    # @param picture_index The picture&#39;s index.
    # @param [Hash] opts the optional parameters
    # @option opts [Picture] :picture Picture object
    # @option opts [String] :folder The document folder.
    # @option opts [String] :storage storage name.
    # @return [PictureResponse]
    def cells_pictures_post_worksheet_picture(name, sheet_name, picture_index, opts = {})
      data, _status_code, _headers = cells_pictures_post_worksheet_picture_with_http_info(name, sheet_name, picture_index, opts)
      return data
    end

    # Update worksheet picture by index.
    # 
    # @param name Document name.
    # @param sheet_name Worksheet name.
    # @param picture_index The picture&#39;s index.
    # @param [Hash] opts the optional parameters
    # @option opts [Picture] :picture Picture object
    # @option opts [String] :folder The document folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(PictureResponse, Fixnum, Hash)>] PictureResponse data, response status code and response headers
    def cells_pictures_post_worksheet_picture_with_http_info(name, sheet_name, picture_index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsPicturesApi.cells_pictures_post_worksheet_picture ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsPicturesApi.cells_pictures_post_worksheet_picture"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsPicturesApi.cells_pictures_post_worksheet_picture"
      end
      # verify the required parameter 'picture_index' is set
      if @api_client.config.client_side_validation && picture_index.nil?
        fail ArgumentError, "Missing the required parameter 'picture_index' when calling CellsPicturesApi.cells_pictures_post_worksheet_picture"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/pictures/{pictureIndex}".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s).sub('{' + 'pictureIndex' + '}', picture_index.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'picture'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PictureResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsPicturesApi#cells_pictures_post_worksheet_picture\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a new worksheet picture.
    # 
    # @param name The workbook name.
    # @param sheet_name The worsheet name.
    # @param [Hash] opts the optional parameters
    # @option opts [Picture] :picture Pictute object
    # @option opts [Integer] :upper_left_row The image upper left row. (default to 0)
    # @option opts [Integer] :upper_left_column The image upper left column. (default to 0)
    # @option opts [Integer] :lower_right_row The image low right row. (default to 0)
    # @option opts [Integer] :lower_right_column The image low right column. (default to 0)
    # @option opts [String] :picture_path The picture path, if not provided the picture data is inspected in the request body.
    # @option opts [String] :folder The workbook folder.
    # @option opts [String] :storage storage name.
    # @return [PicturesResponse]
    def cells_pictures_put_worksheet_add_picture(name, sheet_name, opts = {})
      data, _status_code, _headers = cells_pictures_put_worksheet_add_picture_with_http_info(name, sheet_name, opts)
      return data
    end

    # Add a new worksheet picture.
    # 
    # @param name The workbook name.
    # @param sheet_name The worsheet name.
    # @param [Hash] opts the optional parameters
    # @option opts [Picture] :picture Pictute object
    # @option opts [Integer] :upper_left_row The image upper left row.
    # @option opts [Integer] :upper_left_column The image upper left column.
    # @option opts [Integer] :lower_right_row The image low right row.
    # @option opts [Integer] :lower_right_column The image low right column.
    # @option opts [String] :picture_path The picture path, if not provided the picture data is inspected in the request body.
    # @option opts [String] :folder The workbook folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(PicturesResponse, Fixnum, Hash)>] PicturesResponse data, response status code and response headers
    def cells_pictures_put_worksheet_add_picture_with_http_info(name, sheet_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsPicturesApi.cells_pictures_put_worksheet_add_picture ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsPicturesApi.cells_pictures_put_worksheet_add_picture"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsPicturesApi.cells_pictures_put_worksheet_add_picture"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/pictures".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'upperLeftRow'] = opts[:'upper_left_row'] if !opts[:'upper_left_row'].nil?
      query_params[:'upperLeftColumn'] = opts[:'upper_left_column'] if !opts[:'upper_left_column'].nil?
      query_params[:'lowerRightRow'] = opts[:'lower_right_row'] if !opts[:'lower_right_row'].nil?
      query_params[:'lowerRightColumn'] = opts[:'lower_right_column'] if !opts[:'lower_right_column'].nil?
      query_params[:'picturePath'] = opts[:'picture_path'] if !opts[:'picture_path'].nil?
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'picture'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PicturesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsPicturesApi#cells_pictures_put_worksheet_add_picture\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
