=begin
#Web API Swagger specification

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.0-SNAPSHOT

=end

require "uri"

module AsposeCellsCloud
  class CellsChartAreaApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Get chart area info.
    # 
    # @param name Workbook name.
    # @param sheet_name Worksheet name.
    # @param chart_index The chart index.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder Workbook folder.
    # @option opts [String] :storage storage name.
    # @return [ChartAreaResponse]
    def cells_chart_area_get_chart_area(name, sheet_name, chart_index, opts = {})
      data, _status_code, _headers = cells_chart_area_get_chart_area_with_http_info(name, sheet_name, chart_index, opts)
      return data
    end

    # Get chart area info.
    # 
    # @param name Workbook name.
    # @param sheet_name Worksheet name.
    # @param chart_index The chart index.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder Workbook folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(ChartAreaResponse, Fixnum, Hash)>] ChartAreaResponse data, response status code and response headers
    def cells_chart_area_get_chart_area_with_http_info(name, sheet_name, chart_index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsChartAreaApi.cells_chart_area_get_chart_area ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsChartAreaApi.cells_chart_area_get_chart_area"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsChartAreaApi.cells_chart_area_get_chart_area"
      end
      # verify the required parameter 'chart_index' is set
      if @api_client.config.client_side_validation && chart_index.nil?
        fail ArgumentError, "Missing the required parameter 'chart_index' when calling CellsChartAreaApi.cells_chart_area_get_chart_area"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/chartArea".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s).sub('{' + 'chartIndex' + '}', chart_index.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ChartAreaResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsChartAreaApi#cells_chart_area_get_chart_area\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get chart area border info.
    # 
    # @param name Workbook name.
    # @param sheet_name Worksheet name.
    # @param chart_index The chart index.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder Workbook folder.
    # @option opts [String] :storage storage name.
    # @return [LineResponse]
    def cells_chart_area_get_chart_area_border(name, sheet_name, chart_index, opts = {})
      data, _status_code, _headers = cells_chart_area_get_chart_area_border_with_http_info(name, sheet_name, chart_index, opts)
      return data
    end

    # Get chart area border info.
    # 
    # @param name Workbook name.
    # @param sheet_name Worksheet name.
    # @param chart_index The chart index.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder Workbook folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(LineResponse, Fixnum, Hash)>] LineResponse data, response status code and response headers
    def cells_chart_area_get_chart_area_border_with_http_info(name, sheet_name, chart_index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsChartAreaApi.cells_chart_area_get_chart_area_border ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsChartAreaApi.cells_chart_area_get_chart_area_border"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsChartAreaApi.cells_chart_area_get_chart_area_border"
      end
      # verify the required parameter 'chart_index' is set
      if @api_client.config.client_side_validation && chart_index.nil?
        fail ArgumentError, "Missing the required parameter 'chart_index' when calling CellsChartAreaApi.cells_chart_area_get_chart_area_border"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/chartArea/border".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s).sub('{' + 'chartIndex' + '}', chart_index.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LineResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsChartAreaApi#cells_chart_area_get_chart_area_border\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get chart area fill format info.
    # 
    # @param name Workbook name.
    # @param sheet_name Worksheet name.
    # @param chart_index The chart index.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder Workbook folder.
    # @option opts [String] :storage storage name.
    # @return [FillFormatResponse]
    def cells_chart_area_get_chart_area_fill_format(name, sheet_name, chart_index, opts = {})
      data, _status_code, _headers = cells_chart_area_get_chart_area_fill_format_with_http_info(name, sheet_name, chart_index, opts)
      return data
    end

    # Get chart area fill format info.
    # 
    # @param name Workbook name.
    # @param sheet_name Worksheet name.
    # @param chart_index The chart index.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder Workbook folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(FillFormatResponse, Fixnum, Hash)>] FillFormatResponse data, response status code and response headers
    def cells_chart_area_get_chart_area_fill_format_with_http_info(name, sheet_name, chart_index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsChartAreaApi.cells_chart_area_get_chart_area_fill_format ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsChartAreaApi.cells_chart_area_get_chart_area_fill_format"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsChartAreaApi.cells_chart_area_get_chart_area_fill_format"
      end
      # verify the required parameter 'chart_index' is set
      if @api_client.config.client_side_validation && chart_index.nil?
        fail ArgumentError, "Missing the required parameter 'chart_index' when calling CellsChartAreaApi.cells_chart_area_get_chart_area_fill_format"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/chartArea/fillFormat".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s).sub('{' + 'chartIndex' + '}', chart_index.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FillFormatResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsChartAreaApi#cells_chart_area_get_chart_area_fill_format\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
