=begin
#Web API Swagger specification

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.0-SNAPSHOT

=end

require "uri"

module AsposeCellsCloud
  class CellsChartsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Hide legend in chart
    # 
    # @param name Workbook name.
    # @param sheet_name Worksheet name.
    # @param chart_index The chart index.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The workbook folder.
    # @option opts [String] :storage storage name.
    # @return [SaaSposeResponse]
    def cells_charts_delete_worksheet_chart_legend(name, sheet_name, chart_index, opts = {})
      data, _status_code, _headers = cells_charts_delete_worksheet_chart_legend_with_http_info(name, sheet_name, chart_index, opts)
      return data
    end

    # Hide legend in chart
    # 
    # @param name Workbook name.
    # @param sheet_name Worksheet name.
    # @param chart_index The chart index.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The workbook folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(SaaSposeResponse, Fixnum, Hash)>] SaaSposeResponse data, response status code and response headers
    def cells_charts_delete_worksheet_chart_legend_with_http_info(name, sheet_name, chart_index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsChartsApi.cells_charts_delete_worksheet_chart_legend ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsChartsApi.cells_charts_delete_worksheet_chart_legend"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsChartsApi.cells_charts_delete_worksheet_chart_legend"
      end
      # verify the required parameter 'chart_index' is set
      if @api_client.config.client_side_validation && chart_index.nil?
        fail ArgumentError, "Missing the required parameter 'chart_index' when calling CellsChartsApi.cells_charts_delete_worksheet_chart_legend"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/legend".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s).sub('{' + 'chartIndex' + '}', chart_index.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SaaSposeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsChartsApi#cells_charts_delete_worksheet_chart_legend\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Hide title in chart
    # 
    # @param name Workbook name.
    # @param sheet_name Worksheet name.
    # @param chart_index The chart index.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The workbook folder.
    # @option opts [String] :storage storage name.
    # @return [SaaSposeResponse]
    def cells_charts_delete_worksheet_chart_title(name, sheet_name, chart_index, opts = {})
      data, _status_code, _headers = cells_charts_delete_worksheet_chart_title_with_http_info(name, sheet_name, chart_index, opts)
      return data
    end

    # Hide title in chart
    # 
    # @param name Workbook name.
    # @param sheet_name Worksheet name.
    # @param chart_index The chart index.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The workbook folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(SaaSposeResponse, Fixnum, Hash)>] SaaSposeResponse data, response status code and response headers
    def cells_charts_delete_worksheet_chart_title_with_http_info(name, sheet_name, chart_index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsChartsApi.cells_charts_delete_worksheet_chart_title ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsChartsApi.cells_charts_delete_worksheet_chart_title"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsChartsApi.cells_charts_delete_worksheet_chart_title"
      end
      # verify the required parameter 'chart_index' is set
      if @api_client.config.client_side_validation && chart_index.nil?
        fail ArgumentError, "Missing the required parameter 'chart_index' when calling CellsChartsApi.cells_charts_delete_worksheet_chart_title"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/title".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s).sub('{' + 'chartIndex' + '}', chart_index.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SaaSposeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsChartsApi#cells_charts_delete_worksheet_chart_title\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Clear the charts.
    # 
    # @param name Workbook name.
    # @param sheet_name The worksheet name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The workbook folder.
    # @option opts [String] :storage storage name.
    # @return [SaaSposeResponse]
    def cells_charts_delete_worksheet_clear_charts(name, sheet_name, opts = {})
      data, _status_code, _headers = cells_charts_delete_worksheet_clear_charts_with_http_info(name, sheet_name, opts)
      return data
    end

    # Clear the charts.
    # 
    # @param name Workbook name.
    # @param sheet_name The worksheet name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The workbook folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(SaaSposeResponse, Fixnum, Hash)>] SaaSposeResponse data, response status code and response headers
    def cells_charts_delete_worksheet_clear_charts_with_http_info(name, sheet_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsChartsApi.cells_charts_delete_worksheet_clear_charts ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsChartsApi.cells_charts_delete_worksheet_clear_charts"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsChartsApi.cells_charts_delete_worksheet_clear_charts"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/charts".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SaaSposeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsChartsApi#cells_charts_delete_worksheet_clear_charts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete worksheet chart by index.
    # 
    # @param name Workbook name.
    # @param sheet_name Worksheet name.
    # @param chart_index The chart index.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The workbook folder.
    # @option opts [String] :storage storage name.
    # @return [ChartsResponse]
    def cells_charts_delete_worksheet_delete_chart(name, sheet_name, chart_index, opts = {})
      data, _status_code, _headers = cells_charts_delete_worksheet_delete_chart_with_http_info(name, sheet_name, chart_index, opts)
      return data
    end

    # Delete worksheet chart by index.
    # 
    # @param name Workbook name.
    # @param sheet_name Worksheet name.
    # @param chart_index The chart index.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The workbook folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(ChartsResponse, Fixnum, Hash)>] ChartsResponse data, response status code and response headers
    def cells_charts_delete_worksheet_delete_chart_with_http_info(name, sheet_name, chart_index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsChartsApi.cells_charts_delete_worksheet_delete_chart ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsChartsApi.cells_charts_delete_worksheet_delete_chart"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsChartsApi.cells_charts_delete_worksheet_delete_chart"
      end
      # verify the required parameter 'chart_index' is set
      if @api_client.config.client_side_validation && chart_index.nil?
        fail ArgumentError, "Missing the required parameter 'chart_index' when calling CellsChartsApi.cells_charts_delete_worksheet_delete_chart"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s).sub('{' + 'chartIndex' + '}', chart_index.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ChartsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsChartsApi#cells_charts_delete_worksheet_delete_chart\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get chart info.
    # 
    # @param name Document name.
    # @param sheet_name Worksheet name.
    # @param chart_number The chart number.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :format The exported file format.
    # @option opts [String] :folder The document folder.
    # @option opts [String] :storage storage name.
    # @return [File]
    def cells_charts_get_worksheet_chart(name, sheet_name, chart_number, opts = {})
      data, _status_code, _headers = cells_charts_get_worksheet_chart_with_http_info(name, sheet_name, chart_number, opts)
      return data
    end

    # Get chart info.
    # 
    # @param name Document name.
    # @param sheet_name Worksheet name.
    # @param chart_number The chart number.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :format The exported file format.
    # @option opts [String] :folder The document folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def cells_charts_get_worksheet_chart_with_http_info(name, sheet_name, chart_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsChartsApi.cells_charts_get_worksheet_chart ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsChartsApi.cells_charts_get_worksheet_chart"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsChartsApi.cells_charts_get_worksheet_chart"
      end
      # verify the required parameter 'chart_number' is set
      if @api_client.config.client_side_validation && chart_number.nil?
        fail ArgumentError, "Missing the required parameter 'chart_number' when calling CellsChartsApi.cells_charts_get_worksheet_chart"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/charts/{chartNumber}".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s).sub('{' + 'chartNumber' + '}', chart_number.to_s)

      # query parameters
      query_params = {}
      query_params[:'format'] = opts[:'format'] if !opts[:'format'].nil?
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsChartsApi#cells_charts_get_worksheet_chart\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get chart legend
    # 
    # @param name Workbook name.
    # @param sheet_name Worksheet name.
    # @param chart_index The chart index.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The workbook folder.
    # @option opts [String] :storage storage name.
    # @return [LegendResponse]
    def cells_charts_get_worksheet_chart_legend(name, sheet_name, chart_index, opts = {})
      data, _status_code, _headers = cells_charts_get_worksheet_chart_legend_with_http_info(name, sheet_name, chart_index, opts)
      return data
    end

    # Get chart legend
    # 
    # @param name Workbook name.
    # @param sheet_name Worksheet name.
    # @param chart_index The chart index.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The workbook folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(LegendResponse, Fixnum, Hash)>] LegendResponse data, response status code and response headers
    def cells_charts_get_worksheet_chart_legend_with_http_info(name, sheet_name, chart_index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsChartsApi.cells_charts_get_worksheet_chart_legend ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsChartsApi.cells_charts_get_worksheet_chart_legend"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsChartsApi.cells_charts_get_worksheet_chart_legend"
      end
      # verify the required parameter 'chart_index' is set
      if @api_client.config.client_side_validation && chart_index.nil?
        fail ArgumentError, "Missing the required parameter 'chart_index' when calling CellsChartsApi.cells_charts_get_worksheet_chart_legend"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/legend".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s).sub('{' + 'chartIndex' + '}', chart_index.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LegendResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsChartsApi#cells_charts_get_worksheet_chart_legend\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get chart title
    # 
    # @param name Workbook name.
    # @param sheet_name Worksheet name.
    # @param chart_index The chart index.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The workbook folder.
    # @option opts [String] :storage storage name.
    # @return [TitleResponse]
    def cells_charts_get_worksheet_chart_title(name, sheet_name, chart_index, opts = {})
      data, _status_code, _headers = cells_charts_get_worksheet_chart_title_with_http_info(name, sheet_name, chart_index, opts)
      return data
    end

    # Get chart title
    # 
    # @param name Workbook name.
    # @param sheet_name Worksheet name.
    # @param chart_index The chart index.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The workbook folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(TitleResponse, Fixnum, Hash)>] TitleResponse data, response status code and response headers
    def cells_charts_get_worksheet_chart_title_with_http_info(name, sheet_name, chart_index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsChartsApi.cells_charts_get_worksheet_chart_title ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsChartsApi.cells_charts_get_worksheet_chart_title"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsChartsApi.cells_charts_get_worksheet_chart_title"
      end
      # verify the required parameter 'chart_index' is set
      if @api_client.config.client_side_validation && chart_index.nil?
        fail ArgumentError, "Missing the required parameter 'chart_index' when calling CellsChartsApi.cells_charts_get_worksheet_chart_title"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/title".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s).sub('{' + 'chartIndex' + '}', chart_index.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TitleResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsChartsApi#cells_charts_get_worksheet_chart_title\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get worksheet charts info.
    # 
    # @param name Document name.
    # @param sheet_name The worksheet name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder Document&#39;s folder.
    # @option opts [String] :storage storage name.
    # @return [ChartsResponse]
    def cells_charts_get_worksheet_charts(name, sheet_name, opts = {})
      data, _status_code, _headers = cells_charts_get_worksheet_charts_with_http_info(name, sheet_name, opts)
      return data
    end

    # Get worksheet charts info.
    # 
    # @param name Document name.
    # @param sheet_name The worksheet name.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder Document&#39;s folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(ChartsResponse, Fixnum, Hash)>] ChartsResponse data, response status code and response headers
    def cells_charts_get_worksheet_charts_with_http_info(name, sheet_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsChartsApi.cells_charts_get_worksheet_charts ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsChartsApi.cells_charts_get_worksheet_charts"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsChartsApi.cells_charts_get_worksheet_charts"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/charts".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ChartsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsChartsApi#cells_charts_get_worksheet_charts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update chart propreties
    # 
    # @param name 
    # @param sheet_name 
    # @param chart_index 
    # @param [Hash] opts the optional parameters
    # @option opts [Chart] :chart 
    # @option opts [String] :folder 
    # @option opts [String] :storage storage name.
    # @return [SaaSposeResponse]
    def cells_charts_post_worksheet_chart(name, sheet_name, chart_index, opts = {})
      data, _status_code, _headers = cells_charts_post_worksheet_chart_with_http_info(name, sheet_name, chart_index, opts)
      return data
    end

    # Update chart propreties
    # 
    # @param name 
    # @param sheet_name 
    # @param chart_index 
    # @param [Hash] opts the optional parameters
    # @option opts [Chart] :chart 
    # @option opts [String] :folder 
    # @option opts [String] :storage storage name.
    # @return [Array<(SaaSposeResponse, Fixnum, Hash)>] SaaSposeResponse data, response status code and response headers
    def cells_charts_post_worksheet_chart_with_http_info(name, sheet_name, chart_index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsChartsApi.cells_charts_post_worksheet_chart ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsChartsApi.cells_charts_post_worksheet_chart"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsChartsApi.cells_charts_post_worksheet_chart"
      end
      # verify the required parameter 'chart_index' is set
      if @api_client.config.client_side_validation && chart_index.nil?
        fail ArgumentError, "Missing the required parameter 'chart_index' when calling CellsChartsApi.cells_charts_post_worksheet_chart"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s).sub('{' + 'chartIndex' + '}', chart_index.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'chart'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SaaSposeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsChartsApi#cells_charts_post_worksheet_chart\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update chart legend
    # 
    # @param name Workbook name.
    # @param sheet_name Worksheet name.
    # @param chart_index The chart index.
    # @param [Hash] opts the optional parameters
    # @option opts [Legend] :legend 
    # @option opts [String] :folder The workbook folder.
    # @option opts [String] :storage storage name.
    # @return [LegendResponse]
    def cells_charts_post_worksheet_chart_legend(name, sheet_name, chart_index, opts = {})
      data, _status_code, _headers = cells_charts_post_worksheet_chart_legend_with_http_info(name, sheet_name, chart_index, opts)
      return data
    end

    # Update chart legend
    # 
    # @param name Workbook name.
    # @param sheet_name Worksheet name.
    # @param chart_index The chart index.
    # @param [Hash] opts the optional parameters
    # @option opts [Legend] :legend 
    # @option opts [String] :folder The workbook folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(LegendResponse, Fixnum, Hash)>] LegendResponse data, response status code and response headers
    def cells_charts_post_worksheet_chart_legend_with_http_info(name, sheet_name, chart_index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsChartsApi.cells_charts_post_worksheet_chart_legend ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsChartsApi.cells_charts_post_worksheet_chart_legend"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsChartsApi.cells_charts_post_worksheet_chart_legend"
      end
      # verify the required parameter 'chart_index' is set
      if @api_client.config.client_side_validation && chart_index.nil?
        fail ArgumentError, "Missing the required parameter 'chart_index' when calling CellsChartsApi.cells_charts_post_worksheet_chart_legend"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/legend".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s).sub('{' + 'chartIndex' + '}', chart_index.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'legend'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LegendResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsChartsApi#cells_charts_post_worksheet_chart_legend\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update chart title
    # 
    # @param name Workbook name.
    # @param sheet_name Worksheet name.
    # @param chart_index The chart index.
    # @param [Hash] opts the optional parameters
    # @option opts [Title] :title Chart title
    # @option opts [String] :folder The workbook folder.
    # @option opts [String] :storage storage name.
    # @return [TitleResponse]
    def cells_charts_post_worksheet_chart_title(name, sheet_name, chart_index, opts = {})
      data, _status_code, _headers = cells_charts_post_worksheet_chart_title_with_http_info(name, sheet_name, chart_index, opts)
      return data
    end

    # Update chart title
    # 
    # @param name Workbook name.
    # @param sheet_name Worksheet name.
    # @param chart_index The chart index.
    # @param [Hash] opts the optional parameters
    # @option opts [Title] :title Chart title
    # @option opts [String] :folder The workbook folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(TitleResponse, Fixnum, Hash)>] TitleResponse data, response status code and response headers
    def cells_charts_post_worksheet_chart_title_with_http_info(name, sheet_name, chart_index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsChartsApi.cells_charts_post_worksheet_chart_title ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsChartsApi.cells_charts_post_worksheet_chart_title"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsChartsApi.cells_charts_post_worksheet_chart_title"
      end
      # verify the required parameter 'chart_index' is set
      if @api_client.config.client_side_validation && chart_index.nil?
        fail ArgumentError, "Missing the required parameter 'chart_index' when calling CellsChartsApi.cells_charts_post_worksheet_chart_title"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/title".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s).sub('{' + 'chartIndex' + '}', chart_index.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'title'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TitleResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsChartsApi#cells_charts_post_worksheet_chart_title\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add new chart to worksheet.
    # 
    # @param name Workbook name.
    # @param sheet_name The worksheet name.
    # @param chart_type Chart type, please refer property Type in chart resource.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :upper_left_row New chart upper left row. (default to 0)
    # @option opts [Integer] :upper_left_column New chart upperleft column. (default to 0)
    # @option opts [Integer] :lower_right_row New chart lower right row. (default to 0)
    # @option opts [Integer] :lower_right_column New chart lower right column. (default to 0)
    # @option opts [String] :area Specifies values from which to plot the data series. 
    # @option opts [BOOLEAN] :is_vertical Specifies whether to plot the series from a range of cell values by row or by column.  (default to true)
    # @option opts [String] :category_data Gets or sets the range of category Axis values. It can be a range of cells (such as, \&quot;d1:e10\&quot;). 
    # @option opts [BOOLEAN] :is_auto_get_serial_name Specifies whether auto update serial name.  (default to true)
    # @option opts [String] :title Specifies chart title name.
    # @option opts [String] :folder The workbook folder.
    # @option opts [String] :storage storage name.
    # @return [ChartsResponse]
    def cells_charts_put_worksheet_add_chart(name, sheet_name, chart_type, opts = {})
      data, _status_code, _headers = cells_charts_put_worksheet_add_chart_with_http_info(name, sheet_name, chart_type, opts)
      return data
    end

    # Add new chart to worksheet.
    # 
    # @param name Workbook name.
    # @param sheet_name The worksheet name.
    # @param chart_type Chart type, please refer property Type in chart resource.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :upper_left_row New chart upper left row.
    # @option opts [Integer] :upper_left_column New chart upperleft column.
    # @option opts [Integer] :lower_right_row New chart lower right row.
    # @option opts [Integer] :lower_right_column New chart lower right column.
    # @option opts [String] :area Specifies values from which to plot the data series. 
    # @option opts [BOOLEAN] :is_vertical Specifies whether to plot the series from a range of cell values by row or by column. 
    # @option opts [String] :category_data Gets or sets the range of category Axis values. It can be a range of cells (such as, \&quot;d1:e10\&quot;). 
    # @option opts [BOOLEAN] :is_auto_get_serial_name Specifies whether auto update serial name. 
    # @option opts [String] :title Specifies chart title name.
    # @option opts [String] :folder The workbook folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(ChartsResponse, Fixnum, Hash)>] ChartsResponse data, response status code and response headers
    def cells_charts_put_worksheet_add_chart_with_http_info(name, sheet_name, chart_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsChartsApi.cells_charts_put_worksheet_add_chart ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsChartsApi.cells_charts_put_worksheet_add_chart"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsChartsApi.cells_charts_put_worksheet_add_chart"
      end
      # verify the required parameter 'chart_type' is set
      if @api_client.config.client_side_validation && chart_type.nil?
        fail ArgumentError, "Missing the required parameter 'chart_type' when calling CellsChartsApi.cells_charts_put_worksheet_add_chart"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/charts".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'chartType'] = chart_type
      query_params[:'upperLeftRow'] = opts[:'upper_left_row'] if !opts[:'upper_left_row'].nil?
      query_params[:'upperLeftColumn'] = opts[:'upper_left_column'] if !opts[:'upper_left_column'].nil?
      query_params[:'lowerRightRow'] = opts[:'lower_right_row'] if !opts[:'lower_right_row'].nil?
      query_params[:'lowerRightColumn'] = opts[:'lower_right_column'] if !opts[:'lower_right_column'].nil?
      query_params[:'area'] = opts[:'area'] if !opts[:'area'].nil?
      query_params[:'isVertical'] = opts[:'is_vertical'] if !opts[:'is_vertical'].nil?
      query_params[:'categoryData'] = opts[:'category_data'] if !opts[:'category_data'].nil?
      query_params[:'isAutoGetSerialName'] = opts[:'is_auto_get_serial_name'] if !opts[:'is_auto_get_serial_name'].nil?
      query_params[:'title'] = opts[:'title'] if !opts[:'title'].nil?
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ChartsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsChartsApi#cells_charts_put_worksheet_add_chart\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Show legend in chart
    # 
    # @param name Workbook name.
    # @param sheet_name Worksheet name.
    # @param chart_index The chart index.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The workbook folder.
    # @option opts [String] :storage storage name.
    # @return [SaaSposeResponse]
    def cells_charts_put_worksheet_chart_legend(name, sheet_name, chart_index, opts = {})
      data, _status_code, _headers = cells_charts_put_worksheet_chart_legend_with_http_info(name, sheet_name, chart_index, opts)
      return data
    end

    # Show legend in chart
    # 
    # @param name Workbook name.
    # @param sheet_name Worksheet name.
    # @param chart_index The chart index.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The workbook folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(SaaSposeResponse, Fixnum, Hash)>] SaaSposeResponse data, response status code and response headers
    def cells_charts_put_worksheet_chart_legend_with_http_info(name, sheet_name, chart_index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsChartsApi.cells_charts_put_worksheet_chart_legend ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsChartsApi.cells_charts_put_worksheet_chart_legend"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsChartsApi.cells_charts_put_worksheet_chart_legend"
      end
      # verify the required parameter 'chart_index' is set
      if @api_client.config.client_side_validation && chart_index.nil?
        fail ArgumentError, "Missing the required parameter 'chart_index' when calling CellsChartsApi.cells_charts_put_worksheet_chart_legend"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/legend".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s).sub('{' + 'chartIndex' + '}', chart_index.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SaaSposeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsChartsApi#cells_charts_put_worksheet_chart_legend\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add chart title / Set chart title visible
    # 
    # @param name Workbook name.
    # @param sheet_name Worksheet name.
    # @param chart_index The chart index.
    # @param [Hash] opts the optional parameters
    # @option opts [Title] :title Chart title.
    # @option opts [String] :folder The workbook folder.
    # @option opts [String] :storage storage name.
    # @return [TitleResponse]
    def cells_charts_put_worksheet_chart_title(name, sheet_name, chart_index, opts = {})
      data, _status_code, _headers = cells_charts_put_worksheet_chart_title_with_http_info(name, sheet_name, chart_index, opts)
      return data
    end

    # Add chart title / Set chart title visible
    # 
    # @param name Workbook name.
    # @param sheet_name Worksheet name.
    # @param chart_index The chart index.
    # @param [Hash] opts the optional parameters
    # @option opts [Title] :title Chart title.
    # @option opts [String] :folder The workbook folder.
    # @option opts [String] :storage storage name.
    # @return [Array<(TitleResponse, Fixnum, Hash)>] TitleResponse data, response status code and response headers
    def cells_charts_put_worksheet_chart_title_with_http_info(name, sheet_name, chart_index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CellsChartsApi.cells_charts_put_worksheet_chart_title ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CellsChartsApi.cells_charts_put_worksheet_chart_title"
      end
      # verify the required parameter 'sheet_name' is set
      if @api_client.config.client_side_validation && sheet_name.nil?
        fail ArgumentError, "Missing the required parameter 'sheet_name' when calling CellsChartsApi.cells_charts_put_worksheet_chart_title"
      end
      # verify the required parameter 'chart_index' is set
      if @api_client.config.client_side_validation && chart_index.nil?
        fail ArgumentError, "Missing the required parameter 'chart_index' when calling CellsChartsApi.cells_charts_put_worksheet_chart_title"
      end
      # resource path
      local_var_path = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/title".sub('{' + 'name' + '}', name.to_s).sub('{' + 'sheetName' + '}', sheet_name.to_s).sub('{' + 'chartIndex' + '}', chart_index.to_s)

      # query parameters
      query_params = {}
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'title'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TitleResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CellsChartsApi#cells_charts_put_worksheet_chart_title\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
